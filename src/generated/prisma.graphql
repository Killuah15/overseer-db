# source: https://overseer-db.herokuapp.com/overseer-db/dev
# timestamp: Sat Jan 05 2019 16:48:16 GMT+0100 (GMT+01:00)

type AggregateAttributes {
  count: Int!
}

type AggregateConditions {
  count: Int!
}

type AggregateCreature {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Attributes implements Node {
  id: ID!
  creature(where: CreatureWhereInput): Creature!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""A connection to a list of items."""
type AttributesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributesEdge]!
  aggregate: AggregateAttributes!
}

input AttributesCreateInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
  creature: CreatureCreateOneWithoutAttributesInput!
}

input AttributesCreateOneWithoutCreatureInput {
  create: AttributesCreateWithoutCreatureInput
  connect: AttributesWhereUniqueInput
}

input AttributesCreateWithoutCreatureInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""An edge in a connection."""
type AttributesEdge {
  """The item at the end of the edge."""
  node: Attributes!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributesOrderByInput {
  id_ASC
  id_DESC
  accurate_ASC
  accurate_DESC
  cunning_ASC
  cunning_DESC
  discreet_ASC
  discreet_DESC
  persuasive_ASC
  persuasive_DESC
  quick_ASC
  quick_DESC
  resolute_ASC
  resolute_DESC
  strong_ASC
  strong_DESC
  vigilant_ASC
  vigilant_DESC
  defense_ASC
  defense_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AttributesPreviousValues {
  id: ID!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

type AttributesSubscriptionPayload {
  mutation: MutationType!
  node: Attributes
  updatedFields: [String!]
  previousValues: AttributesPreviousValues
}

input AttributesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributesWhereInput
}

input AttributesUpdateInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
  creature: CreatureUpdateOneWithoutAttributesInput
}

input AttributesUpdateOneWithoutCreatureInput {
  create: AttributesCreateWithoutCreatureInput
  connect: AttributesWhereUniqueInput
  delete: Boolean
  update: AttributesUpdateWithoutCreatureDataInput
  upsert: AttributesUpsertWithoutCreatureInput
}

input AttributesUpdateWithoutCreatureDataInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
}

input AttributesUpsertWithoutCreatureInput {
  update: AttributesUpdateWithoutCreatureDataInput!
  create: AttributesCreateWithoutCreatureInput!
}

input AttributesWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accurate: Int

  """All values that are not equal to given value."""
  accurate_not: Int

  """All values that are contained in given list."""
  accurate_in: [Int!]

  """All values that are not contained in given list."""
  accurate_not_in: [Int!]

  """All values less than the given value."""
  accurate_lt: Int

  """All values less than or equal the given value."""
  accurate_lte: Int

  """All values greater than the given value."""
  accurate_gt: Int

  """All values greater than or equal the given value."""
  accurate_gte: Int
  cunning: Int

  """All values that are not equal to given value."""
  cunning_not: Int

  """All values that are contained in given list."""
  cunning_in: [Int!]

  """All values that are not contained in given list."""
  cunning_not_in: [Int!]

  """All values less than the given value."""
  cunning_lt: Int

  """All values less than or equal the given value."""
  cunning_lte: Int

  """All values greater than the given value."""
  cunning_gt: Int

  """All values greater than or equal the given value."""
  cunning_gte: Int
  discreet: Int

  """All values that are not equal to given value."""
  discreet_not: Int

  """All values that are contained in given list."""
  discreet_in: [Int!]

  """All values that are not contained in given list."""
  discreet_not_in: [Int!]

  """All values less than the given value."""
  discreet_lt: Int

  """All values less than or equal the given value."""
  discreet_lte: Int

  """All values greater than the given value."""
  discreet_gt: Int

  """All values greater than or equal the given value."""
  discreet_gte: Int
  persuasive: Int

  """All values that are not equal to given value."""
  persuasive_not: Int

  """All values that are contained in given list."""
  persuasive_in: [Int!]

  """All values that are not contained in given list."""
  persuasive_not_in: [Int!]

  """All values less than the given value."""
  persuasive_lt: Int

  """All values less than or equal the given value."""
  persuasive_lte: Int

  """All values greater than the given value."""
  persuasive_gt: Int

  """All values greater than or equal the given value."""
  persuasive_gte: Int
  quick: Int

  """All values that are not equal to given value."""
  quick_not: Int

  """All values that are contained in given list."""
  quick_in: [Int!]

  """All values that are not contained in given list."""
  quick_not_in: [Int!]

  """All values less than the given value."""
  quick_lt: Int

  """All values less than or equal the given value."""
  quick_lte: Int

  """All values greater than the given value."""
  quick_gt: Int

  """All values greater than or equal the given value."""
  quick_gte: Int
  resolute: Int

  """All values that are not equal to given value."""
  resolute_not: Int

  """All values that are contained in given list."""
  resolute_in: [Int!]

  """All values that are not contained in given list."""
  resolute_not_in: [Int!]

  """All values less than the given value."""
  resolute_lt: Int

  """All values less than or equal the given value."""
  resolute_lte: Int

  """All values greater than the given value."""
  resolute_gt: Int

  """All values greater than or equal the given value."""
  resolute_gte: Int
  strong: Int

  """All values that are not equal to given value."""
  strong_not: Int

  """All values that are contained in given list."""
  strong_in: [Int!]

  """All values that are not contained in given list."""
  strong_not_in: [Int!]

  """All values less than the given value."""
  strong_lt: Int

  """All values less than or equal the given value."""
  strong_lte: Int

  """All values greater than the given value."""
  strong_gt: Int

  """All values greater than or equal the given value."""
  strong_gte: Int
  vigilant: Int

  """All values that are not equal to given value."""
  vigilant_not: Int

  """All values that are contained in given list."""
  vigilant_in: [Int!]

  """All values that are not contained in given list."""
  vigilant_not_in: [Int!]

  """All values less than the given value."""
  vigilant_lt: Int

  """All values less than or equal the given value."""
  vigilant_lte: Int

  """All values greater than the given value."""
  vigilant_gt: Int

  """All values greater than or equal the given value."""
  vigilant_gte: Int
  defense: Int

  """All values that are not equal to given value."""
  defense_not: Int

  """All values that are contained in given list."""
  defense_in: [Int!]

  """All values that are not contained in given list."""
  defense_not_in: [Int!]

  """All values less than the given value."""
  defense_lt: Int

  """All values less than or equal the given value."""
  defense_lte: Int

  """All values greater than the given value."""
  defense_gt: Int

  """All values greater than or equal the given value."""
  defense_gte: Int
  creature: CreatureWhereInput
}

input AttributesWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Conditions implements Node {
  id: ID!
  creature(where: CreatureWhereInput): Creature!
  toughness: Int!
  painThreshold: Int!
  corruption: Int!
  corruptionThreshold: Int!
  corruptionPermanent: Int!
}

"""A connection to a list of items."""
type ConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConditionsEdge]!
  aggregate: AggregateConditions!
}

input ConditionsCreateInput {
  toughness: Int!
  painThreshold: Int!
  corruption: Int!
  corruptionThreshold: Int!
  corruptionPermanent: Int!
  creature: CreatureCreateOneWithoutConditionsInput!
}

input ConditionsCreateOneWithoutCreatureInput {
  create: ConditionsCreateWithoutCreatureInput
  connect: ConditionsWhereUniqueInput
}

input ConditionsCreateWithoutCreatureInput {
  toughness: Int!
  painThreshold: Int!
  corruption: Int!
  corruptionThreshold: Int!
  corruptionPermanent: Int!
}

"""An edge in a connection."""
type ConditionsEdge {
  """The item at the end of the edge."""
  node: Conditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConditionsOrderByInput {
  id_ASC
  id_DESC
  toughness_ASC
  toughness_DESC
  painThreshold_ASC
  painThreshold_DESC
  corruption_ASC
  corruption_DESC
  corruptionThreshold_ASC
  corruptionThreshold_DESC
  corruptionPermanent_ASC
  corruptionPermanent_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConditionsPreviousValues {
  id: ID!
  toughness: Int!
  painThreshold: Int!
  corruption: Int!
  corruptionThreshold: Int!
  corruptionPermanent: Int!
}

type ConditionsSubscriptionPayload {
  mutation: MutationType!
  node: Conditions
  updatedFields: [String!]
  previousValues: ConditionsPreviousValues
}

input ConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConditionsWhereInput
}

input ConditionsUpdateInput {
  toughness: Int
  painThreshold: Int
  corruption: Int
  corruptionThreshold: Int
  corruptionPermanent: Int
  creature: CreatureUpdateOneWithoutConditionsInput
}

input ConditionsUpdateOneWithoutCreatureInput {
  create: ConditionsCreateWithoutCreatureInput
  connect: ConditionsWhereUniqueInput
  delete: Boolean
  update: ConditionsUpdateWithoutCreatureDataInput
  upsert: ConditionsUpsertWithoutCreatureInput
}

input ConditionsUpdateWithoutCreatureDataInput {
  toughness: Int
  painThreshold: Int
  corruption: Int
  corruptionThreshold: Int
  corruptionPermanent: Int
}

input ConditionsUpsertWithoutCreatureInput {
  update: ConditionsUpdateWithoutCreatureDataInput!
  create: ConditionsCreateWithoutCreatureInput!
}

input ConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  toughness: Int

  """All values that are not equal to given value."""
  toughness_not: Int

  """All values that are contained in given list."""
  toughness_in: [Int!]

  """All values that are not contained in given list."""
  toughness_not_in: [Int!]

  """All values less than the given value."""
  toughness_lt: Int

  """All values less than or equal the given value."""
  toughness_lte: Int

  """All values greater than the given value."""
  toughness_gt: Int

  """All values greater than or equal the given value."""
  toughness_gte: Int
  painThreshold: Int

  """All values that are not equal to given value."""
  painThreshold_not: Int

  """All values that are contained in given list."""
  painThreshold_in: [Int!]

  """All values that are not contained in given list."""
  painThreshold_not_in: [Int!]

  """All values less than the given value."""
  painThreshold_lt: Int

  """All values less than or equal the given value."""
  painThreshold_lte: Int

  """All values greater than the given value."""
  painThreshold_gt: Int

  """All values greater than or equal the given value."""
  painThreshold_gte: Int
  corruption: Int

  """All values that are not equal to given value."""
  corruption_not: Int

  """All values that are contained in given list."""
  corruption_in: [Int!]

  """All values that are not contained in given list."""
  corruption_not_in: [Int!]

  """All values less than the given value."""
  corruption_lt: Int

  """All values less than or equal the given value."""
  corruption_lte: Int

  """All values greater than the given value."""
  corruption_gt: Int

  """All values greater than or equal the given value."""
  corruption_gte: Int
  corruptionThreshold: Int

  """All values that are not equal to given value."""
  corruptionThreshold_not: Int

  """All values that are contained in given list."""
  corruptionThreshold_in: [Int!]

  """All values that are not contained in given list."""
  corruptionThreshold_not_in: [Int!]

  """All values less than the given value."""
  corruptionThreshold_lt: Int

  """All values less than or equal the given value."""
  corruptionThreshold_lte: Int

  """All values greater than the given value."""
  corruptionThreshold_gt: Int

  """All values greater than or equal the given value."""
  corruptionThreshold_gte: Int
  corruptionPermanent: Int

  """All values that are not equal to given value."""
  corruptionPermanent_not: Int

  """All values that are contained in given list."""
  corruptionPermanent_in: [Int!]

  """All values that are not contained in given list."""
  corruptionPermanent_not_in: [Int!]

  """All values less than the given value."""
  corruptionPermanent_lt: Int

  """All values less than or equal the given value."""
  corruptionPermanent_lte: Int

  """All values greater than the given value."""
  corruptionPermanent_gt: Int

  """All values greater than or equal the given value."""
  corruptionPermanent_gte: Int
  creature: CreatureWhereInput
}

input ConditionsWhereUniqueInput {
  id: ID
}

type Creature implements Node {
  id: ID!
  event(where: EventWhereInput): Event!
  name: String
  race: String!
  shadow: String
  Conditions(where: ConditionsWhereInput): Conditions!
  attributes(where: AttributesWhereInput): Attributes!
}

"""A connection to a list of items."""
type CreatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreatureEdge]!
  aggregate: AggregateCreature!
}

input CreatureCreateInput {
  name: String
  race: String!
  shadow: String
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
}

input CreatureCreateManyWithoutEventInput {
  create: [CreatureCreateWithoutEventInput!]
  connect: [CreatureWhereUniqueInput!]
}

input CreatureCreateOneWithoutAttributesInput {
  create: CreatureCreateWithoutAttributesInput
  connect: CreatureWhereUniqueInput
}

input CreatureCreateOneWithoutConditionsInput {
  create: CreatureCreateWithoutConditionsInput
  connect: CreatureWhereUniqueInput
}

input CreatureCreateWithoutAttributesInput {
  name: String
  race: String!
  shadow: String
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
}

input CreatureCreateWithoutConditionsInput {
  name: String
  race: String!
  shadow: String
  event: EventCreateOneWithoutCreaturesInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
}

input CreatureCreateWithoutEventInput {
  name: String
  race: String!
  shadow: String
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
}

"""An edge in a connection."""
type CreatureEdge {
  """The item at the end of the edge."""
  node: Creature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CreatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  race_ASC
  race_DESC
  shadow_ASC
  shadow_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CreaturePreviousValues {
  id: ID!
  name: String
  race: String!
  shadow: String
}

type CreatureSubscriptionPayload {
  mutation: MutationType!
  node: Creature
  updatedFields: [String!]
  previousValues: CreaturePreviousValues
}

input CreatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CreatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreatureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CreatureWhereInput
}

input CreatureUpdateInput {
  name: String
  race: String
  shadow: String
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
}

input CreatureUpdateManyWithoutEventInput {
  create: [CreatureCreateWithoutEventInput!]
  connect: [CreatureWhereUniqueInput!]
  disconnect: [CreatureWhereUniqueInput!]
  delete: [CreatureWhereUniqueInput!]
  update: [CreatureUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [CreatureUpsertWithWhereUniqueWithoutEventInput!]
}

input CreatureUpdateOneWithoutAttributesInput {
  create: CreatureCreateWithoutAttributesInput
  connect: CreatureWhereUniqueInput
  delete: Boolean
  update: CreatureUpdateWithoutAttributesDataInput
  upsert: CreatureUpsertWithoutAttributesInput
}

input CreatureUpdateOneWithoutConditionsInput {
  create: CreatureCreateWithoutConditionsInput
  connect: CreatureWhereUniqueInput
  delete: Boolean
  update: CreatureUpdateWithoutConditionsDataInput
  upsert: CreatureUpsertWithoutConditionsInput
}

input CreatureUpdateWithoutAttributesDataInput {
  name: String
  race: String
  shadow: String
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
}

input CreatureUpdateWithoutConditionsDataInput {
  name: String
  race: String
  shadow: String
  event: EventUpdateOneWithoutCreaturesInput
  attributes: AttributesUpdateOneWithoutCreatureInput
}

input CreatureUpdateWithoutEventDataInput {
  name: String
  race: String
  shadow: String
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
}

input CreatureUpdateWithWhereUniqueWithoutEventInput {
  where: CreatureWhereUniqueInput!
  data: CreatureUpdateWithoutEventDataInput!
}

input CreatureUpsertWithoutAttributesInput {
  update: CreatureUpdateWithoutAttributesDataInput!
  create: CreatureCreateWithoutAttributesInput!
}

input CreatureUpsertWithoutConditionsInput {
  update: CreatureUpdateWithoutConditionsDataInput!
  create: CreatureCreateWithoutConditionsInput!
}

input CreatureUpsertWithWhereUniqueWithoutEventInput {
  where: CreatureWhereUniqueInput!
  update: CreatureUpdateWithoutEventDataInput!
  create: CreatureCreateWithoutEventInput!
}

input CreatureWhereInput {
  """Logical AND on all given filters."""
  AND: [CreatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  race: String

  """All values that are not equal to given value."""
  race_not: String

  """All values that are contained in given list."""
  race_in: [String!]

  """All values that are not contained in given list."""
  race_not_in: [String!]

  """All values less than the given value."""
  race_lt: String

  """All values less than or equal the given value."""
  race_lte: String

  """All values greater than the given value."""
  race_gt: String

  """All values greater than or equal the given value."""
  race_gte: String

  """All values containing the given string."""
  race_contains: String

  """All values not containing the given string."""
  race_not_contains: String

  """All values starting with the given string."""
  race_starts_with: String

  """All values not starting with the given string."""
  race_not_starts_with: String

  """All values ending with the given string."""
  race_ends_with: String

  """All values not ending with the given string."""
  race_not_ends_with: String
  shadow: String

  """All values that are not equal to given value."""
  shadow_not: String

  """All values that are contained in given list."""
  shadow_in: [String!]

  """All values that are not contained in given list."""
  shadow_not_in: [String!]

  """All values less than the given value."""
  shadow_lt: String

  """All values less than or equal the given value."""
  shadow_lte: String

  """All values greater than the given value."""
  shadow_gt: String

  """All values greater than or equal the given value."""
  shadow_gte: String

  """All values containing the given string."""
  shadow_contains: String

  """All values not containing the given string."""
  shadow_not_contains: String

  """All values starting with the given string."""
  shadow_starts_with: String

  """All values not starting with the given string."""
  shadow_not_starts_with: String

  """All values ending with the given string."""
  shadow_ends_with: String

  """All values not ending with the given string."""
  shadow_not_ends_with: String
  event: EventWhereInput
  Conditions: ConditionsWhereInput
  attributes: AttributesWhereInput
}

input CreatureWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event implements Node {
  id: ID!
  title: String!
  description: String
  eventRole: EventRole!
  project(where: ProjectWhereInput): Project!
  creatures(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Creature!]
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String
  eventRole: EventRole!
  project: ProjectCreateOneWithoutEventsInput!
  creatures: CreatureCreateManyWithoutEventInput
}

input EventCreateManyWithoutProjectInput {
  create: [EventCreateWithoutProjectInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneWithoutCreaturesInput {
  create: EventCreateWithoutCreaturesInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutCreaturesInput {
  title: String!
  description: String
  eventRole: EventRole!
  project: ProjectCreateOneWithoutEventsInput!
}

input EventCreateWithoutProjectInput {
  title: String!
  description: String
  eventRole: EventRole!
  creatures: CreatureCreateManyWithoutEventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  eventRole_ASC
  eventRole_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String
  eventRole: EventRole!
}

enum EventRole {
  GENERIC
  QUEST
  COMBAT
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  eventRole: EventRole
  project: ProjectUpdateOneWithoutEventsInput
  creatures: CreatureUpdateManyWithoutEventInput
}

input EventUpdateManyWithoutProjectInput {
  create: [EventCreateWithoutProjectInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutProjectInput!]
}

input EventUpdateOneWithoutCreaturesInput {
  create: EventCreateWithoutCreaturesInput
  connect: EventWhereUniqueInput
  delete: Boolean
  update: EventUpdateWithoutCreaturesDataInput
  upsert: EventUpsertWithoutCreaturesInput
}

input EventUpdateWithoutCreaturesDataInput {
  title: String
  description: String
  eventRole: EventRole
  project: ProjectUpdateOneWithoutEventsInput
}

input EventUpdateWithoutProjectDataInput {
  title: String
  description: String
  eventRole: EventRole
  creatures: CreatureUpdateManyWithoutEventInput
}

input EventUpdateWithWhereUniqueWithoutProjectInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutProjectDataInput!
}

input EventUpsertWithoutCreaturesInput {
  update: EventUpdateWithoutCreaturesDataInput!
  create: EventCreateWithoutCreaturesInput!
}

input EventUpsertWithWhereUniqueWithoutProjectInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutProjectDataInput!
  create: EventCreateWithoutProjectInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  eventRole: EventRole

  """All values that are not equal to given value."""
  eventRole_not: EventRole

  """All values that are contained in given list."""
  eventRole_in: [EventRole!]

  """All values that are not contained in given list."""
  eventRole_not_in: [EventRole!]
  project: ProjectWhereInput
  creatures_every: CreatureWhereInput
  creatures_some: CreatureWhereInput
  creatures_none: CreatureWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  createEvent(data: EventCreateInput!): Event!
  createCreature(data: CreatureCreateInput!): Creature!
  createAttributes(data: AttributesCreateInput!): Attributes!
  createConditions(data: ConditionsCreateInput!): Conditions!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateCreature(data: CreatureUpdateInput!, where: CreatureWhereUniqueInput!): Creature
  updateAttributes(data: AttributesUpdateInput!, where: AttributesWhereUniqueInput!): Attributes
  updateConditions(data: ConditionsUpdateInput!, where: ConditionsWhereUniqueInput!): Conditions
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteCreature(where: CreatureWhereUniqueInput!): Creature
  deleteAttributes(where: AttributesWhereUniqueInput!): Attributes
  deleteConditions(where: ConditionsWhereUniqueInput!): Conditions
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertCreature(where: CreatureWhereUniqueInput!, create: CreatureCreateInput!, update: CreatureUpdateInput!): Creature!
  upsertAttributes(where: AttributesWhereUniqueInput!, create: AttributesCreateInput!, update: AttributesUpdateInput!): Attributes!
  upsertConditions(where: ConditionsWhereUniqueInput!, create: ConditionsCreateInput!, update: ConditionsUpdateInput!): Conditions!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyCreatures(data: CreatureUpdateInput!, where: CreatureWhereInput): BatchPayload!
  updateManyAttributeses(data: AttributesUpdateInput!, where: AttributesWhereInput): BatchPayload!
  updateManyConditionses(data: ConditionsUpdateInput!, where: ConditionsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyCreatures(where: CreatureWhereInput): BatchPayload!
  deleteManyAttributeses(where: AttributesWhereInput): BatchPayload!
  deleteManyConditionses(where: ConditionsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Project implements Node {
  id: ID!
  title: String!
  description: String
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  title: String!
  description: String
  events: EventCreateManyWithoutProjectInput
  author: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutEventsInput {
  create: ProjectCreateWithoutEventsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAuthorInput {
  title: String!
  description: String
  events: EventCreateManyWithoutProjectInput
}

input ProjectCreateWithoutEventsInput {
  title: String!
  description: String
  author: UserCreateOneWithoutProjectsInput!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  description: String
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  description: String
  events: EventUpdateManyWithoutProjectInput
  author: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ProjectUpdateOneWithoutEventsInput {
  create: ProjectCreateWithoutEventsInput
  connect: ProjectWhereUniqueInput
  delete: Boolean
  update: ProjectUpdateWithoutEventsDataInput
  upsert: ProjectUpsertWithoutEventsInput
}

input ProjectUpdateWithoutAuthorDataInput {
  title: String
  description: String
  events: EventUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutEventsDataInput {
  title: String
  description: String
  author: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAuthorDataInput!
}

input ProjectUpsertWithoutEventsInput {
  update: ProjectUpdateWithoutEventsDataInput!
  create: ProjectCreateWithoutEventsInput!
}

input ProjectUpsertWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAuthorDataInput!
  create: ProjectCreateWithoutAuthorInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  author: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  creatures(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Creature]!
  attributeses(where: AttributesWhereInput, orderBy: AttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attributes]!
  conditionses(where: ConditionsWhereInput, orderBy: ConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conditions]!
  user(where: UserWhereUniqueInput!): User
  project(where: ProjectWhereUniqueInput!): Project
  event(where: EventWhereUniqueInput!): Event
  creature(where: CreatureWhereUniqueInput!): Creature
  attributes(where: AttributesWhereUniqueInput!): Attributes
  conditions(where: ConditionsWhereUniqueInput!): Conditions
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  creaturesConnection(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreatureConnection!
  attributesesConnection(where: AttributesWhereInput, orderBy: AttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributesConnection!
  conditionsesConnection(where: ConditionsWhereInput, orderBy: ConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConditionsConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  creature(where: CreatureSubscriptionWhereInput): CreatureSubscriptionPayload
  attributes(where: AttributesSubscriptionWhereInput): AttributesSubscriptionPayload
  conditions(where: ConditionsSubscriptionWhereInput): ConditionsSubscriptionPayload
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectsInput {
  username: String!
  email: String!
  password: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateWithoutProjectsDataInput {
  username: String
  email: String
  password: String
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
