# source: https://overseer-db.herokuapp.com/overseer-db/dev
# timestamp: Sun Jan 20 2019 03:59:46 GMT+0100 (GMT+01:00)

type Ability implements Node {
  id: ID!
  creature(where: CreatureWhereInput): Creature!
  currentRank: SymAbilityRank!
  description(where: AbilityDescriptionWhereInput, orderBy: AbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AbilityDescription!]
}

"""A connection to a list of items."""
type AbilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AbilityEdge]!
  aggregate: AggregateAbility!
}

input AbilityCreateInput {
  currentRank: SymAbilityRank!
  creature: CreatureCreateOneWithoutAbilitiesInput!
  description: AbilityDescriptionCreateManyWithoutAbilityInput
}

input AbilityCreateManyWithoutCreatureInput {
  create: [AbilityCreateWithoutCreatureInput!]
  connect: [AbilityWhereUniqueInput!]
}

input AbilityCreateOneWithoutDescriptionInput {
  create: AbilityCreateWithoutDescriptionInput
  connect: AbilityWhereUniqueInput
}

input AbilityCreateWithoutCreatureInput {
  currentRank: SymAbilityRank!
  description: AbilityDescriptionCreateManyWithoutAbilityInput
}

input AbilityCreateWithoutDescriptionInput {
  currentRank: SymAbilityRank!
  creature: CreatureCreateOneWithoutAbilitiesInput!
}

type AbilityDescription implements Node {
  id: ID!
  ability(where: AbilityWhereInput): Ability!
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

"""A connection to a list of items."""
type AbilityDescriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AbilityDescriptionEdge]!
  aggregate: AggregateAbilityDescription!
}

input AbilityDescriptionCreateInput {
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
  ability: AbilityCreateOneWithoutDescriptionInput!
}

input AbilityDescriptionCreateManyWithoutAbilityInput {
  create: [AbilityDescriptionCreateWithoutAbilityInput!]
  connect: [AbilityDescriptionWhereUniqueInput!]
}

input AbilityDescriptionCreateWithoutAbilityInput {
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

"""An edge in a connection."""
type AbilityDescriptionEdge {
  """The item at the end of the edge."""
  node: AbilityDescription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AbilityDescriptionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  rank_ASC
  rank_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AbilityDescriptionPreviousValues {
  id: ID!
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

type AbilityDescriptionSubscriptionPayload {
  mutation: MutationType!
  node: AbilityDescription
  updatedFields: [String!]
  previousValues: AbilityDescriptionPreviousValues
}

input AbilityDescriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AbilityDescriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AbilityDescriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AbilityDescriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AbilityDescriptionWhereInput
}

input AbilityDescriptionUpdateInput {
  type: SymAbilityType
  rank: SymAbilityRank
  description: String
  ability: AbilityUpdateOneWithoutDescriptionInput
}

input AbilityDescriptionUpdateManyWithoutAbilityInput {
  create: [AbilityDescriptionCreateWithoutAbilityInput!]
  connect: [AbilityDescriptionWhereUniqueInput!]
  disconnect: [AbilityDescriptionWhereUniqueInput!]
  delete: [AbilityDescriptionWhereUniqueInput!]
  update: [AbilityDescriptionUpdateWithWhereUniqueWithoutAbilityInput!]
  upsert: [AbilityDescriptionUpsertWithWhereUniqueWithoutAbilityInput!]
}

input AbilityDescriptionUpdateWithoutAbilityDataInput {
  type: SymAbilityType
  rank: SymAbilityRank
  description: String
}

input AbilityDescriptionUpdateWithWhereUniqueWithoutAbilityInput {
  where: AbilityDescriptionWhereUniqueInput!
  data: AbilityDescriptionUpdateWithoutAbilityDataInput!
}

input AbilityDescriptionUpsertWithWhereUniqueWithoutAbilityInput {
  where: AbilityDescriptionWhereUniqueInput!
  update: AbilityDescriptionUpdateWithoutAbilityDataInput!
  create: AbilityDescriptionCreateWithoutAbilityInput!
}

input AbilityDescriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AbilityDescriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AbilityDescriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AbilityDescriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: SymAbilityType

  """All values that are not equal to given value."""
  type_not: SymAbilityType

  """All values that are contained in given list."""
  type_in: [SymAbilityType!]

  """All values that are not contained in given list."""
  type_not_in: [SymAbilityType!]
  rank: SymAbilityRank

  """All values that are not equal to given value."""
  rank_not: SymAbilityRank

  """All values that are contained in given list."""
  rank_in: [SymAbilityRank!]

  """All values that are not contained in given list."""
  rank_not_in: [SymAbilityRank!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  ability: AbilityWhereInput
}

input AbilityDescriptionWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type AbilityEdge {
  """The item at the end of the edge."""
  node: Ability!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AbilityOrderByInput {
  id_ASC
  id_DESC
  currentRank_ASC
  currentRank_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AbilityPreviousValues {
  id: ID!
  currentRank: SymAbilityRank!
}

type AbilitySubscriptionPayload {
  mutation: MutationType!
  node: Ability
  updatedFields: [String!]
  previousValues: AbilityPreviousValues
}

input AbilitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AbilitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AbilitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AbilitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AbilityWhereInput
}

input AbilityUpdateInput {
  currentRank: SymAbilityRank
  creature: CreatureUpdateOneWithoutAbilitiesInput
  description: AbilityDescriptionUpdateManyWithoutAbilityInput
}

input AbilityUpdateManyWithoutCreatureInput {
  create: [AbilityCreateWithoutCreatureInput!]
  connect: [AbilityWhereUniqueInput!]
  disconnect: [AbilityWhereUniqueInput!]
  delete: [AbilityWhereUniqueInput!]
  update: [AbilityUpdateWithWhereUniqueWithoutCreatureInput!]
  upsert: [AbilityUpsertWithWhereUniqueWithoutCreatureInput!]
}

input AbilityUpdateOneWithoutDescriptionInput {
  create: AbilityCreateWithoutDescriptionInput
  connect: AbilityWhereUniqueInput
  delete: Boolean
  update: AbilityUpdateWithoutDescriptionDataInput
  upsert: AbilityUpsertWithoutDescriptionInput
}

input AbilityUpdateWithoutCreatureDataInput {
  currentRank: SymAbilityRank
  description: AbilityDescriptionUpdateManyWithoutAbilityInput
}

input AbilityUpdateWithoutDescriptionDataInput {
  currentRank: SymAbilityRank
  creature: CreatureUpdateOneWithoutAbilitiesInput
}

input AbilityUpdateWithWhereUniqueWithoutCreatureInput {
  where: AbilityWhereUniqueInput!
  data: AbilityUpdateWithoutCreatureDataInput!
}

input AbilityUpsertWithoutDescriptionInput {
  update: AbilityUpdateWithoutDescriptionDataInput!
  create: AbilityCreateWithoutDescriptionInput!
}

input AbilityUpsertWithWhereUniqueWithoutCreatureInput {
  where: AbilityWhereUniqueInput!
  update: AbilityUpdateWithoutCreatureDataInput!
  create: AbilityCreateWithoutCreatureInput!
}

input AbilityWhereInput {
  """Logical AND on all given filters."""
  AND: [AbilityWhereInput!]

  """Logical OR on all given filters."""
  OR: [AbilityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AbilityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentRank: SymAbilityRank

  """All values that are not equal to given value."""
  currentRank_not: SymAbilityRank

  """All values that are contained in given list."""
  currentRank_in: [SymAbilityRank!]

  """All values that are not contained in given list."""
  currentRank_not_in: [SymAbilityRank!]
  creature: CreatureWhereInput
  description_every: AbilityDescriptionWhereInput
  description_some: AbilityDescriptionWhereInput
  description_none: AbilityDescriptionWhereInput
}

input AbilityWhereUniqueInput {
  id: ID
}

type AggregateAbility {
  count: Int!
}

type AggregateAbilityDescription {
  count: Int!
}

type AggregateAttributes {
  count: Int!
}

type AggregateConditions {
  count: Int!
}

type AggregateCorruption {
  count: Int!
}

type AggregateCreature {
  count: Int!
}

type AggregateEvent {
  count: Int!
}

type AggregateFitness {
  count: Int!
}

type AggregatePAttributes {
  count: Int!
}

type AggregatePConditions {
  count: Int!
}

type AggregatePCorruption {
  count: Int!
}

type AggregatePFitness {
  count: Int!
}

type AggregatePhysicalConditions {
  count: Int!
}

type AggregatePPhysicalConditions {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregatePSpiritualConditions {
  count: Int!
}

type AggregatePSymAbility {
  count: Int!
}

type AggregatePSymAbilityDescription {
  count: Int!
}

type AggregatePSymCreature {
  count: Int!
}

type AggregateSpiritualConditions {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Attributes implements Node {
  id: ID!
  creature(where: CreatureWhereInput): Creature!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""A connection to a list of items."""
type AttributesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AttributesEdge]!
  aggregate: AggregateAttributes!
}

input AttributesCreateInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
  creature: CreatureCreateOneWithoutAttributesInput!
}

input AttributesCreateOneWithoutCreatureInput {
  create: AttributesCreateWithoutCreatureInput
  connect: AttributesWhereUniqueInput
}

input AttributesCreateWithoutCreatureInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""An edge in a connection."""
type AttributesEdge {
  """The item at the end of the edge."""
  node: Attributes!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AttributesOrderByInput {
  id_ASC
  id_DESC
  accurate_ASC
  accurate_DESC
  cunning_ASC
  cunning_DESC
  discreet_ASC
  discreet_DESC
  persuasive_ASC
  persuasive_DESC
  quick_ASC
  quick_DESC
  resolute_ASC
  resolute_DESC
  strong_ASC
  strong_DESC
  vigilant_ASC
  vigilant_DESC
  defense_ASC
  defense_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AttributesPreviousValues {
  id: ID!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

type AttributesSubscriptionPayload {
  mutation: MutationType!
  node: Attributes
  updatedFields: [String!]
  previousValues: AttributesPreviousValues
}

input AttributesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AttributesWhereInput
}

input AttributesUpdateInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
  creature: CreatureUpdateOneWithoutAttributesInput
}

input AttributesUpdateOneWithoutCreatureInput {
  create: AttributesCreateWithoutCreatureInput
  connect: AttributesWhereUniqueInput
  delete: Boolean
  update: AttributesUpdateWithoutCreatureDataInput
  upsert: AttributesUpsertWithoutCreatureInput
}

input AttributesUpdateWithoutCreatureDataInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
}

input AttributesUpsertWithoutCreatureInput {
  update: AttributesUpdateWithoutCreatureDataInput!
  create: AttributesCreateWithoutCreatureInput!
}

input AttributesWhereInput {
  """Logical AND on all given filters."""
  AND: [AttributesWhereInput!]

  """Logical OR on all given filters."""
  OR: [AttributesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AttributesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accurate: Int

  """All values that are not equal to given value."""
  accurate_not: Int

  """All values that are contained in given list."""
  accurate_in: [Int!]

  """All values that are not contained in given list."""
  accurate_not_in: [Int!]

  """All values less than the given value."""
  accurate_lt: Int

  """All values less than or equal the given value."""
  accurate_lte: Int

  """All values greater than the given value."""
  accurate_gt: Int

  """All values greater than or equal the given value."""
  accurate_gte: Int
  cunning: Int

  """All values that are not equal to given value."""
  cunning_not: Int

  """All values that are contained in given list."""
  cunning_in: [Int!]

  """All values that are not contained in given list."""
  cunning_not_in: [Int!]

  """All values less than the given value."""
  cunning_lt: Int

  """All values less than or equal the given value."""
  cunning_lte: Int

  """All values greater than the given value."""
  cunning_gt: Int

  """All values greater than or equal the given value."""
  cunning_gte: Int
  discreet: Int

  """All values that are not equal to given value."""
  discreet_not: Int

  """All values that are contained in given list."""
  discreet_in: [Int!]

  """All values that are not contained in given list."""
  discreet_not_in: [Int!]

  """All values less than the given value."""
  discreet_lt: Int

  """All values less than or equal the given value."""
  discreet_lte: Int

  """All values greater than the given value."""
  discreet_gt: Int

  """All values greater than or equal the given value."""
  discreet_gte: Int
  persuasive: Int

  """All values that are not equal to given value."""
  persuasive_not: Int

  """All values that are contained in given list."""
  persuasive_in: [Int!]

  """All values that are not contained in given list."""
  persuasive_not_in: [Int!]

  """All values less than the given value."""
  persuasive_lt: Int

  """All values less than or equal the given value."""
  persuasive_lte: Int

  """All values greater than the given value."""
  persuasive_gt: Int

  """All values greater than or equal the given value."""
  persuasive_gte: Int
  quick: Int

  """All values that are not equal to given value."""
  quick_not: Int

  """All values that are contained in given list."""
  quick_in: [Int!]

  """All values that are not contained in given list."""
  quick_not_in: [Int!]

  """All values less than the given value."""
  quick_lt: Int

  """All values less than or equal the given value."""
  quick_lte: Int

  """All values greater than the given value."""
  quick_gt: Int

  """All values greater than or equal the given value."""
  quick_gte: Int
  resolute: Int

  """All values that are not equal to given value."""
  resolute_not: Int

  """All values that are contained in given list."""
  resolute_in: [Int!]

  """All values that are not contained in given list."""
  resolute_not_in: [Int!]

  """All values less than the given value."""
  resolute_lt: Int

  """All values less than or equal the given value."""
  resolute_lte: Int

  """All values greater than the given value."""
  resolute_gt: Int

  """All values greater than or equal the given value."""
  resolute_gte: Int
  strong: Int

  """All values that are not equal to given value."""
  strong_not: Int

  """All values that are contained in given list."""
  strong_in: [Int!]

  """All values that are not contained in given list."""
  strong_not_in: [Int!]

  """All values less than the given value."""
  strong_lt: Int

  """All values less than or equal the given value."""
  strong_lte: Int

  """All values greater than the given value."""
  strong_gt: Int

  """All values greater than or equal the given value."""
  strong_gte: Int
  vigilant: Int

  """All values that are not equal to given value."""
  vigilant_not: Int

  """All values that are contained in given list."""
  vigilant_in: [Int!]

  """All values that are not contained in given list."""
  vigilant_not_in: [Int!]

  """All values less than the given value."""
  vigilant_lt: Int

  """All values less than or equal the given value."""
  vigilant_lte: Int

  """All values greater than the given value."""
  vigilant_gt: Int

  """All values greater than or equal the given value."""
  vigilant_gte: Int
  defense: Int

  """All values that are not equal to given value."""
  defense_not: Int

  """All values that are contained in given list."""
  defense_in: [Int!]

  """All values that are not contained in given list."""
  defense_not_in: [Int!]

  """All values less than the given value."""
  defense_lt: Int

  """All values less than or equal the given value."""
  defense_lte: Int

  """All values greater than the given value."""
  defense_gt: Int

  """All values greater than or equal the given value."""
  defense_gte: Int
  creature: CreatureWhereInput
}

input AttributesWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Conditions implements Node {
  id: ID!
  creature(where: CreatureWhereInput): Creature!
  physical(where: PhysicalConditionsWhereInput): PhysicalConditions!
  spiritual(where: SpiritualConditionsWhereInput): SpiritualConditions!
}

"""A connection to a list of items."""
type ConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConditionsEdge]!
  aggregate: AggregateConditions!
}

input ConditionsCreateInput {
  creature: CreatureCreateOneWithoutConditionsInput!
  physical: PhysicalConditionsCreateOneWithoutConditionsInput!
  spiritual: SpiritualConditionsCreateOneWithoutConditionsInput!
}

input ConditionsCreateOneWithoutCreatureInput {
  create: ConditionsCreateWithoutCreatureInput
  connect: ConditionsWhereUniqueInput
}

input ConditionsCreateOneWithoutPhysicalInput {
  create: ConditionsCreateWithoutPhysicalInput
  connect: ConditionsWhereUniqueInput
}

input ConditionsCreateOneWithoutSpiritualInput {
  create: ConditionsCreateWithoutSpiritualInput
  connect: ConditionsWhereUniqueInput
}

input ConditionsCreateWithoutCreatureInput {
  physical: PhysicalConditionsCreateOneWithoutConditionsInput!
  spiritual: SpiritualConditionsCreateOneWithoutConditionsInput!
}

input ConditionsCreateWithoutPhysicalInput {
  creature: CreatureCreateOneWithoutConditionsInput!
  spiritual: SpiritualConditionsCreateOneWithoutConditionsInput!
}

input ConditionsCreateWithoutSpiritualInput {
  creature: CreatureCreateOneWithoutConditionsInput!
  physical: PhysicalConditionsCreateOneWithoutConditionsInput!
}

"""An edge in a connection."""
type ConditionsEdge {
  """The item at the end of the edge."""
  node: Conditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConditionsPreviousValues {
  id: ID!
}

type ConditionsSubscriptionPayload {
  mutation: MutationType!
  node: Conditions
  updatedFields: [String!]
  previousValues: ConditionsPreviousValues
}

input ConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConditionsWhereInput
}

input ConditionsUpdateInput {
  creature: CreatureUpdateOneWithoutConditionsInput
  physical: PhysicalConditionsUpdateOneWithoutConditionsInput
  spiritual: SpiritualConditionsUpdateOneWithoutConditionsInput
}

input ConditionsUpdateOneWithoutCreatureInput {
  create: ConditionsCreateWithoutCreatureInput
  connect: ConditionsWhereUniqueInput
  delete: Boolean
  update: ConditionsUpdateWithoutCreatureDataInput
  upsert: ConditionsUpsertWithoutCreatureInput
}

input ConditionsUpdateOneWithoutPhysicalInput {
  create: ConditionsCreateWithoutPhysicalInput
  connect: ConditionsWhereUniqueInput
  delete: Boolean
  update: ConditionsUpdateWithoutPhysicalDataInput
  upsert: ConditionsUpsertWithoutPhysicalInput
}

input ConditionsUpdateOneWithoutSpiritualInput {
  create: ConditionsCreateWithoutSpiritualInput
  connect: ConditionsWhereUniqueInput
  delete: Boolean
  update: ConditionsUpdateWithoutSpiritualDataInput
  upsert: ConditionsUpsertWithoutSpiritualInput
}

input ConditionsUpdateWithoutCreatureDataInput {
  physical: PhysicalConditionsUpdateOneWithoutConditionsInput
  spiritual: SpiritualConditionsUpdateOneWithoutConditionsInput
}

input ConditionsUpdateWithoutPhysicalDataInput {
  creature: CreatureUpdateOneWithoutConditionsInput
  spiritual: SpiritualConditionsUpdateOneWithoutConditionsInput
}

input ConditionsUpdateWithoutSpiritualDataInput {
  creature: CreatureUpdateOneWithoutConditionsInput
  physical: PhysicalConditionsUpdateOneWithoutConditionsInput
}

input ConditionsUpsertWithoutCreatureInput {
  update: ConditionsUpdateWithoutCreatureDataInput!
  create: ConditionsCreateWithoutCreatureInput!
}

input ConditionsUpsertWithoutPhysicalInput {
  update: ConditionsUpdateWithoutPhysicalDataInput!
  create: ConditionsCreateWithoutPhysicalInput!
}

input ConditionsUpsertWithoutSpiritualInput {
  update: ConditionsUpdateWithoutSpiritualDataInput!
  create: ConditionsCreateWithoutSpiritualInput!
}

input ConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [ConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  creature: CreatureWhereInput
  physical: PhysicalConditionsWhereInput
  spiritual: SpiritualConditionsWhereInput
}

input ConditionsWhereUniqueInput {
  id: ID
}

type Corruption implements Node {
  id: ID!
  spiritualConditions(where: SpiritualConditionsWhereInput): SpiritualConditions!
  current: Int!
  threshold: Int!
  permanent: Int!
}

"""A connection to a list of items."""
type CorruptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CorruptionEdge]!
  aggregate: AggregateCorruption!
}

input CorruptionCreateInput {
  current: Int!
  threshold: Int!
  permanent: Int!
  spiritualConditions: SpiritualConditionsCreateOneWithoutCorruptionInput!
}

input CorruptionCreateOneWithoutSpiritualConditionsInput {
  create: CorruptionCreateWithoutSpiritualConditionsInput
  connect: CorruptionWhereUniqueInput
}

input CorruptionCreateWithoutSpiritualConditionsInput {
  current: Int!
  threshold: Int!
  permanent: Int!
}

"""An edge in a connection."""
type CorruptionEdge {
  """The item at the end of the edge."""
  node: Corruption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CorruptionOrderByInput {
  id_ASC
  id_DESC
  current_ASC
  current_DESC
  threshold_ASC
  threshold_DESC
  permanent_ASC
  permanent_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CorruptionPreviousValues {
  id: ID!
  current: Int!
  threshold: Int!
  permanent: Int!
}

type CorruptionSubscriptionPayload {
  mutation: MutationType!
  node: Corruption
  updatedFields: [String!]
  previousValues: CorruptionPreviousValues
}

input CorruptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CorruptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CorruptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CorruptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CorruptionWhereInput
}

input CorruptionUpdateInput {
  current: Int
  threshold: Int
  permanent: Int
  spiritualConditions: SpiritualConditionsUpdateOneWithoutCorruptionInput
}

input CorruptionUpdateOneWithoutSpiritualConditionsInput {
  create: CorruptionCreateWithoutSpiritualConditionsInput
  connect: CorruptionWhereUniqueInput
  delete: Boolean
  update: CorruptionUpdateWithoutSpiritualConditionsDataInput
  upsert: CorruptionUpsertWithoutSpiritualConditionsInput
}

input CorruptionUpdateWithoutSpiritualConditionsDataInput {
  current: Int
  threshold: Int
  permanent: Int
}

input CorruptionUpsertWithoutSpiritualConditionsInput {
  update: CorruptionUpdateWithoutSpiritualConditionsDataInput!
  create: CorruptionCreateWithoutSpiritualConditionsInput!
}

input CorruptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CorruptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CorruptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CorruptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  current: Int

  """All values that are not equal to given value."""
  current_not: Int

  """All values that are contained in given list."""
  current_in: [Int!]

  """All values that are not contained in given list."""
  current_not_in: [Int!]

  """All values less than the given value."""
  current_lt: Int

  """All values less than or equal the given value."""
  current_lte: Int

  """All values greater than the given value."""
  current_gt: Int

  """All values greater than or equal the given value."""
  current_gte: Int
  threshold: Int

  """All values that are not equal to given value."""
  threshold_not: Int

  """All values that are contained in given list."""
  threshold_in: [Int!]

  """All values that are not contained in given list."""
  threshold_not_in: [Int!]

  """All values less than the given value."""
  threshold_lt: Int

  """All values less than or equal the given value."""
  threshold_lte: Int

  """All values greater than the given value."""
  threshold_gt: Int

  """All values greater than or equal the given value."""
  threshold_gte: Int
  permanent: Int

  """All values that are not equal to given value."""
  permanent_not: Int

  """All values that are contained in given list."""
  permanent_in: [Int!]

  """All values that are not contained in given list."""
  permanent_not_in: [Int!]

  """All values less than the given value."""
  permanent_lt: Int

  """All values less than or equal the given value."""
  permanent_lte: Int

  """All values greater than the given value."""
  permanent_gt: Int

  """All values greater than or equal the given value."""
  permanent_gte: Int
  spiritualConditions: SpiritualConditionsWhereInput
}

input CorruptionWhereUniqueInput {
  id: ID
}

type Creature implements Node {
  id: ID!
  author(where: UserWhereInput): User!
  event(where: EventWhereInput): Event!
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions(where: ConditionsWhereInput): Conditions!
  attributes(where: AttributesWhereInput): Attributes!
  abilities(where: AbilityWhereInput, orderBy: AbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ability!]
}

"""A connection to a list of items."""
type CreatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreatureEdge]!
  aggregate: AggregateCreature!
}

input CreatureCreateInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutCreaturesInput!
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
  abilities: AbilityCreateManyWithoutCreatureInput
}

input CreatureCreateManyWithoutAuthorInput {
  create: [CreatureCreateWithoutAuthorInput!]
  connect: [CreatureWhereUniqueInput!]
}

input CreatureCreateManyWithoutEventInput {
  create: [CreatureCreateWithoutEventInput!]
  connect: [CreatureWhereUniqueInput!]
}

input CreatureCreateOneWithoutAbilitiesInput {
  create: CreatureCreateWithoutAbilitiesInput
  connect: CreatureWhereUniqueInput
}

input CreatureCreateOneWithoutAttributesInput {
  create: CreatureCreateWithoutAttributesInput
  connect: CreatureWhereUniqueInput
}

input CreatureCreateOneWithoutConditionsInput {
  create: CreatureCreateWithoutConditionsInput
  connect: CreatureWhereUniqueInput
}

input CreatureCreateWithoutAbilitiesInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutCreaturesInput!
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
}

input CreatureCreateWithoutAttributesInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutCreaturesInput!
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  abilities: AbilityCreateManyWithoutCreatureInput
}

input CreatureCreateWithoutAuthorInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  event: EventCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
  abilities: AbilityCreateManyWithoutCreatureInput
}

input CreatureCreateWithoutConditionsInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutCreaturesInput!
  event: EventCreateOneWithoutCreaturesInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
  abilities: AbilityCreateManyWithoutCreatureInput
}

input CreatureCreateWithoutEventInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutCreaturesInput!
  Conditions: ConditionsCreateOneWithoutCreatureInput!
  attributes: AttributesCreateOneWithoutCreatureInput!
  abilities: AbilityCreateManyWithoutCreatureInput
}

"""An edge in a connection."""
type CreatureEdge {
  """The item at the end of the edge."""
  node: Creature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CreatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  race_ASC
  race_DESC
  shadow_ASC
  shadow_DESC
  rulebook_ASC
  rulebook_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CreaturePreviousValues {
  id: ID!
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
}

type CreatureSubscriptionPayload {
  mutation: MutationType!
  node: Creature
  updatedFields: [String!]
  previousValues: CreaturePreviousValues
}

input CreatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CreatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreatureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CreatureWhereInput
}

input CreatureUpdateInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutCreaturesInput
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
  abilities: AbilityUpdateManyWithoutCreatureInput
}

input CreatureUpdateManyWithoutAuthorInput {
  create: [CreatureCreateWithoutAuthorInput!]
  connect: [CreatureWhereUniqueInput!]
  disconnect: [CreatureWhereUniqueInput!]
  delete: [CreatureWhereUniqueInput!]
  update: [CreatureUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CreatureUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CreatureUpdateManyWithoutEventInput {
  create: [CreatureCreateWithoutEventInput!]
  connect: [CreatureWhereUniqueInput!]
  disconnect: [CreatureWhereUniqueInput!]
  delete: [CreatureWhereUniqueInput!]
  update: [CreatureUpdateWithWhereUniqueWithoutEventInput!]
  upsert: [CreatureUpsertWithWhereUniqueWithoutEventInput!]
}

input CreatureUpdateOneWithoutAbilitiesInput {
  create: CreatureCreateWithoutAbilitiesInput
  connect: CreatureWhereUniqueInput
  delete: Boolean
  update: CreatureUpdateWithoutAbilitiesDataInput
  upsert: CreatureUpsertWithoutAbilitiesInput
}

input CreatureUpdateOneWithoutAttributesInput {
  create: CreatureCreateWithoutAttributesInput
  connect: CreatureWhereUniqueInput
  delete: Boolean
  update: CreatureUpdateWithoutAttributesDataInput
  upsert: CreatureUpsertWithoutAttributesInput
}

input CreatureUpdateOneWithoutConditionsInput {
  create: CreatureCreateWithoutConditionsInput
  connect: CreatureWhereUniqueInput
  delete: Boolean
  update: CreatureUpdateWithoutConditionsDataInput
  upsert: CreatureUpsertWithoutConditionsInput
}

input CreatureUpdateWithoutAbilitiesDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutCreaturesInput
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
}

input CreatureUpdateWithoutAttributesDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutCreaturesInput
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  abilities: AbilityUpdateManyWithoutCreatureInput
}

input CreatureUpdateWithoutAuthorDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  event: EventUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
  abilities: AbilityUpdateManyWithoutCreatureInput
}

input CreatureUpdateWithoutConditionsDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutCreaturesInput
  event: EventUpdateOneWithoutCreaturesInput
  attributes: AttributesUpdateOneWithoutCreatureInput
  abilities: AbilityUpdateManyWithoutCreatureInput
}

input CreatureUpdateWithoutEventDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutCreaturesInput
  Conditions: ConditionsUpdateOneWithoutCreatureInput
  attributes: AttributesUpdateOneWithoutCreatureInput
  abilities: AbilityUpdateManyWithoutCreatureInput
}

input CreatureUpdateWithWhereUniqueWithoutAuthorInput {
  where: CreatureWhereUniqueInput!
  data: CreatureUpdateWithoutAuthorDataInput!
}

input CreatureUpdateWithWhereUniqueWithoutEventInput {
  where: CreatureWhereUniqueInput!
  data: CreatureUpdateWithoutEventDataInput!
}

input CreatureUpsertWithoutAbilitiesInput {
  update: CreatureUpdateWithoutAbilitiesDataInput!
  create: CreatureCreateWithoutAbilitiesInput!
}

input CreatureUpsertWithoutAttributesInput {
  update: CreatureUpdateWithoutAttributesDataInput!
  create: CreatureCreateWithoutAttributesInput!
}

input CreatureUpsertWithoutConditionsInput {
  update: CreatureUpdateWithoutConditionsDataInput!
  create: CreatureCreateWithoutConditionsInput!
}

input CreatureUpsertWithWhereUniqueWithoutAuthorInput {
  where: CreatureWhereUniqueInput!
  update: CreatureUpdateWithoutAuthorDataInput!
  create: CreatureCreateWithoutAuthorInput!
}

input CreatureUpsertWithWhereUniqueWithoutEventInput {
  where: CreatureWhereUniqueInput!
  update: CreatureUpdateWithoutEventDataInput!
  create: CreatureCreateWithoutEventInput!
}

input CreatureWhereInput {
  """Logical AND on all given filters."""
  AND: [CreatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  race: String

  """All values that are not equal to given value."""
  race_not: String

  """All values that are contained in given list."""
  race_in: [String!]

  """All values that are not contained in given list."""
  race_not_in: [String!]

  """All values less than the given value."""
  race_lt: String

  """All values less than or equal the given value."""
  race_lte: String

  """All values greater than the given value."""
  race_gt: String

  """All values greater than or equal the given value."""
  race_gte: String

  """All values containing the given string."""
  race_contains: String

  """All values not containing the given string."""
  race_not_contains: String

  """All values starting with the given string."""
  race_starts_with: String

  """All values not starting with the given string."""
  race_not_starts_with: String

  """All values ending with the given string."""
  race_ends_with: String

  """All values not ending with the given string."""
  race_not_ends_with: String
  shadow: String

  """All values that are not equal to given value."""
  shadow_not: String

  """All values that are contained in given list."""
  shadow_in: [String!]

  """All values that are not contained in given list."""
  shadow_not_in: [String!]

  """All values less than the given value."""
  shadow_lt: String

  """All values less than or equal the given value."""
  shadow_lte: String

  """All values greater than the given value."""
  shadow_gt: String

  """All values greater than or equal the given value."""
  shadow_gte: String

  """All values containing the given string."""
  shadow_contains: String

  """All values not containing the given string."""
  shadow_not_contains: String

  """All values starting with the given string."""
  shadow_starts_with: String

  """All values not starting with the given string."""
  shadow_not_starts_with: String

  """All values ending with the given string."""
  shadow_ends_with: String

  """All values not ending with the given string."""
  shadow_not_ends_with: String
  rulebook: Rulebook

  """All values that are not equal to given value."""
  rulebook_not: Rulebook

  """All values that are contained in given list."""
  rulebook_in: [Rulebook!]

  """All values that are not contained in given list."""
  rulebook_not_in: [Rulebook!]
  author: UserWhereInput
  event: EventWhereInput
  Conditions: ConditionsWhereInput
  attributes: AttributesWhereInput
  abilities_every: AbilityWhereInput
  abilities_some: AbilityWhereInput
  abilities_none: AbilityWhereInput
}

input CreatureWhereUniqueInput {
  id: ID
}

scalar DateTime

type Event implements Node {
  id: ID!
  author(where: UserWhereInput): User!
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  project(where: ProjectWhereInput): Project!
  creatures(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Creature!]
}

"""A connection to a list of items."""
type EventConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EventEdge]!
  aggregate: AggregateEvent!
}

input EventCreateInput {
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  author: UserCreateOneWithoutEventsInput!
  project: ProjectCreateOneWithoutEventsInput!
  creatures: CreatureCreateManyWithoutEventInput
}

input EventCreateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateManyWithoutProjectInput {
  create: [EventCreateWithoutProjectInput!]
  connect: [EventWhereUniqueInput!]
}

input EventCreateOneWithoutCreaturesInput {
  create: EventCreateWithoutCreaturesInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutAuthorInput {
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  project: ProjectCreateOneWithoutEventsInput!
  creatures: CreatureCreateManyWithoutEventInput
}

input EventCreateWithoutCreaturesInput {
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  author: UserCreateOneWithoutEventsInput!
  project: ProjectCreateOneWithoutEventsInput!
}

input EventCreateWithoutProjectInput {
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  author: UserCreateOneWithoutEventsInput!
  creatures: CreatureCreateManyWithoutEventInput
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EventOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  eventRole_ASC
  eventRole_DESC
  index_ASC
  index_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EventPreviousValues {
  id: ID!
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
}

enum EventRole {
  GENERIC
  QUEST
  COMBAT
}

type EventSubscriptionPayload {
  mutation: MutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

input EventSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EventSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EventWhereInput
}

input EventUpdateInput {
  title: String
  description: String
  eventRole: EventRole
  index: Int
  author: UserUpdateOneWithoutEventsInput
  project: ProjectUpdateOneWithoutEventsInput
  creatures: CreatureUpdateManyWithoutEventInput
}

input EventUpdateManyWithoutAuthorInput {
  create: [EventCreateWithoutAuthorInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutAuthorInput!]
}

input EventUpdateManyWithoutProjectInput {
  create: [EventCreateWithoutProjectInput!]
  connect: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutProjectInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutProjectInput!]
}

input EventUpdateOneWithoutCreaturesInput {
  create: EventCreateWithoutCreaturesInput
  connect: EventWhereUniqueInput
  delete: Boolean
  update: EventUpdateWithoutCreaturesDataInput
  upsert: EventUpsertWithoutCreaturesInput
}

input EventUpdateWithoutAuthorDataInput {
  title: String
  description: String
  eventRole: EventRole
  index: Int
  project: ProjectUpdateOneWithoutEventsInput
  creatures: CreatureUpdateManyWithoutEventInput
}

input EventUpdateWithoutCreaturesDataInput {
  title: String
  description: String
  eventRole: EventRole
  index: Int
  author: UserUpdateOneWithoutEventsInput
  project: ProjectUpdateOneWithoutEventsInput
}

input EventUpdateWithoutProjectDataInput {
  title: String
  description: String
  eventRole: EventRole
  index: Int
  author: UserUpdateOneWithoutEventsInput
  creatures: CreatureUpdateManyWithoutEventInput
}

input EventUpdateWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutAuthorDataInput!
}

input EventUpdateWithWhereUniqueWithoutProjectInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutProjectDataInput!
}

input EventUpsertWithoutCreaturesInput {
  update: EventUpdateWithoutCreaturesDataInput!
  create: EventCreateWithoutCreaturesInput!
}

input EventUpsertWithWhereUniqueWithoutAuthorInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutAuthorDataInput!
  create: EventCreateWithoutAuthorInput!
}

input EventUpsertWithWhereUniqueWithoutProjectInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutProjectDataInput!
  create: EventCreateWithoutProjectInput!
}

input EventWhereInput {
  """Logical AND on all given filters."""
  AND: [EventWhereInput!]

  """Logical OR on all given filters."""
  OR: [EventWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EventWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  eventRole: EventRole

  """All values that are not equal to given value."""
  eventRole_not: EventRole

  """All values that are contained in given list."""
  eventRole_in: [EventRole!]

  """All values that are not contained in given list."""
  eventRole_not_in: [EventRole!]
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  author: UserWhereInput
  project: ProjectWhereInput
  creatures_every: CreatureWhereInput
  creatures_some: CreatureWhereInput
  creatures_none: CreatureWhereInput
}

input EventWhereUniqueInput {
  id: ID
}

type Fitness implements Node {
  id: ID!
  physicalConditions(where: PhysicalConditionsWhereInput): PhysicalConditions!
  toughness: Int!
  painThreshold: Int!
}

"""A connection to a list of items."""
type FitnessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FitnessEdge]!
  aggregate: AggregateFitness!
}

input FitnessCreateInput {
  toughness: Int!
  painThreshold: Int!
  physicalConditions: PhysicalConditionsCreateOneWithoutFitnessInput!
}

input FitnessCreateOneWithoutPhysicalConditionsInput {
  create: FitnessCreateWithoutPhysicalConditionsInput
  connect: FitnessWhereUniqueInput
}

input FitnessCreateWithoutPhysicalConditionsInput {
  toughness: Int!
  painThreshold: Int!
}

"""An edge in a connection."""
type FitnessEdge {
  """The item at the end of the edge."""
  node: Fitness!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FitnessOrderByInput {
  id_ASC
  id_DESC
  toughness_ASC
  toughness_DESC
  painThreshold_ASC
  painThreshold_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FitnessPreviousValues {
  id: ID!
  toughness: Int!
  painThreshold: Int!
}

type FitnessSubscriptionPayload {
  mutation: MutationType!
  node: Fitness
  updatedFields: [String!]
  previousValues: FitnessPreviousValues
}

input FitnessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FitnessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FitnessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FitnessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FitnessWhereInput
}

input FitnessUpdateInput {
  toughness: Int
  painThreshold: Int
  physicalConditions: PhysicalConditionsUpdateOneWithoutFitnessInput
}

input FitnessUpdateOneWithoutPhysicalConditionsInput {
  create: FitnessCreateWithoutPhysicalConditionsInput
  connect: FitnessWhereUniqueInput
  delete: Boolean
  update: FitnessUpdateWithoutPhysicalConditionsDataInput
  upsert: FitnessUpsertWithoutPhysicalConditionsInput
}

input FitnessUpdateWithoutPhysicalConditionsDataInput {
  toughness: Int
  painThreshold: Int
}

input FitnessUpsertWithoutPhysicalConditionsInput {
  update: FitnessUpdateWithoutPhysicalConditionsDataInput!
  create: FitnessCreateWithoutPhysicalConditionsInput!
}

input FitnessWhereInput {
  """Logical AND on all given filters."""
  AND: [FitnessWhereInput!]

  """Logical OR on all given filters."""
  OR: [FitnessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FitnessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  toughness: Int

  """All values that are not equal to given value."""
  toughness_not: Int

  """All values that are contained in given list."""
  toughness_in: [Int!]

  """All values that are not contained in given list."""
  toughness_not_in: [Int!]

  """All values less than the given value."""
  toughness_lt: Int

  """All values less than or equal the given value."""
  toughness_lte: Int

  """All values greater than the given value."""
  toughness_gt: Int

  """All values greater than or equal the given value."""
  toughness_gte: Int
  painThreshold: Int

  """All values that are not equal to given value."""
  painThreshold_not: Int

  """All values that are contained in given list."""
  painThreshold_in: [Int!]

  """All values that are not contained in given list."""
  painThreshold_not_in: [Int!]

  """All values less than the given value."""
  painThreshold_lt: Int

  """All values less than or equal the given value."""
  painThreshold_lte: Int

  """All values greater than the given value."""
  painThreshold_gt: Int

  """All values greater than or equal the given value."""
  painThreshold_gte: Int
  physicalConditions: PhysicalConditionsWhereInput
}

input FitnessWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createProject(data: ProjectCreateInput!): Project!
  createEvent(data: EventCreateInput!): Event!
  createCreature(data: CreatureCreateInput!): Creature!
  createAbility(data: AbilityCreateInput!): Ability!
  createAbilityDescription(data: AbilityDescriptionCreateInput!): AbilityDescription!
  createAttributes(data: AttributesCreateInput!): Attributes!
  createConditions(data: ConditionsCreateInput!): Conditions!
  createPhysicalConditions(data: PhysicalConditionsCreateInput!): PhysicalConditions!
  createSpiritualConditions(data: SpiritualConditionsCreateInput!): SpiritualConditions!
  createFitness(data: FitnessCreateInput!): Fitness!
  createCorruption(data: CorruptionCreateInput!): Corruption!
  createPSymCreature(data: PSymCreatureCreateInput!): PSymCreature!
  createPSymAbility(data: PSymAbilityCreateInput!): PSymAbility!
  createPSymAbilityDescription(data: PSymAbilityDescriptionCreateInput!): PSymAbilityDescription!
  createPAttributes(data: PAttributesCreateInput!): PAttributes!
  createPConditions(data: PConditionsCreateInput!): PConditions!
  createPPhysicalConditions(data: PPhysicalConditionsCreateInput!): PPhysicalConditions!
  createPSpiritualConditions(data: PSpiritualConditionsCreateInput!): PSpiritualConditions!
  createPFitness(data: PFitnessCreateInput!): PFitness!
  createPCorruption(data: PCorruptionCreateInput!): PCorruption!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  updateCreature(data: CreatureUpdateInput!, where: CreatureWhereUniqueInput!): Creature
  updateAbility(data: AbilityUpdateInput!, where: AbilityWhereUniqueInput!): Ability
  updateAbilityDescription(data: AbilityDescriptionUpdateInput!, where: AbilityDescriptionWhereUniqueInput!): AbilityDescription
  updateAttributes(data: AttributesUpdateInput!, where: AttributesWhereUniqueInput!): Attributes
  updateConditions(data: ConditionsUpdateInput!, where: ConditionsWhereUniqueInput!): Conditions
  updatePhysicalConditions(data: PhysicalConditionsUpdateInput!, where: PhysicalConditionsWhereUniqueInput!): PhysicalConditions
  updateSpiritualConditions(data: SpiritualConditionsUpdateInput!, where: SpiritualConditionsWhereUniqueInput!): SpiritualConditions
  updateFitness(data: FitnessUpdateInput!, where: FitnessWhereUniqueInput!): Fitness
  updateCorruption(data: CorruptionUpdateInput!, where: CorruptionWhereUniqueInput!): Corruption
  updatePSymCreature(data: PSymCreatureUpdateInput!, where: PSymCreatureWhereUniqueInput!): PSymCreature
  updatePSymAbility(data: PSymAbilityUpdateInput!, where: PSymAbilityWhereUniqueInput!): PSymAbility
  updatePSymAbilityDescription(data: PSymAbilityDescriptionUpdateInput!, where: PSymAbilityDescriptionWhereUniqueInput!): PSymAbilityDescription
  updatePAttributes(data: PAttributesUpdateInput!, where: PAttributesWhereUniqueInput!): PAttributes
  updatePConditions(data: PConditionsUpdateInput!, where: PConditionsWhereUniqueInput!): PConditions
  updatePPhysicalConditions(data: PPhysicalConditionsUpdateInput!, where: PPhysicalConditionsWhereUniqueInput!): PPhysicalConditions
  updatePSpiritualConditions(data: PSpiritualConditionsUpdateInput!, where: PSpiritualConditionsWhereUniqueInput!): PSpiritualConditions
  updatePFitness(data: PFitnessUpdateInput!, where: PFitnessWhereUniqueInput!): PFitness
  updatePCorruption(data: PCorruptionUpdateInput!, where: PCorruptionWhereUniqueInput!): PCorruption
  deleteUser(where: UserWhereUniqueInput!): User
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteCreature(where: CreatureWhereUniqueInput!): Creature
  deleteAbility(where: AbilityWhereUniqueInput!): Ability
  deleteAbilityDescription(where: AbilityDescriptionWhereUniqueInput!): AbilityDescription
  deleteAttributes(where: AttributesWhereUniqueInput!): Attributes
  deleteConditions(where: ConditionsWhereUniqueInput!): Conditions
  deletePhysicalConditions(where: PhysicalConditionsWhereUniqueInput!): PhysicalConditions
  deleteSpiritualConditions(where: SpiritualConditionsWhereUniqueInput!): SpiritualConditions
  deleteFitness(where: FitnessWhereUniqueInput!): Fitness
  deleteCorruption(where: CorruptionWhereUniqueInput!): Corruption
  deletePSymCreature(where: PSymCreatureWhereUniqueInput!): PSymCreature
  deletePSymAbility(where: PSymAbilityWhereUniqueInput!): PSymAbility
  deletePSymAbilityDescription(where: PSymAbilityDescriptionWhereUniqueInput!): PSymAbilityDescription
  deletePAttributes(where: PAttributesWhereUniqueInput!): PAttributes
  deletePConditions(where: PConditionsWhereUniqueInput!): PConditions
  deletePPhysicalConditions(where: PPhysicalConditionsWhereUniqueInput!): PPhysicalConditions
  deletePSpiritualConditions(where: PSpiritualConditionsWhereUniqueInput!): PSpiritualConditions
  deletePFitness(where: PFitnessWhereUniqueInput!): PFitness
  deletePCorruption(where: PCorruptionWhereUniqueInput!): PCorruption
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertEvent(where: EventWhereUniqueInput!, create: EventCreateInput!, update: EventUpdateInput!): Event!
  upsertCreature(where: CreatureWhereUniqueInput!, create: CreatureCreateInput!, update: CreatureUpdateInput!): Creature!
  upsertAbility(where: AbilityWhereUniqueInput!, create: AbilityCreateInput!, update: AbilityUpdateInput!): Ability!
  upsertAbilityDescription(where: AbilityDescriptionWhereUniqueInput!, create: AbilityDescriptionCreateInput!, update: AbilityDescriptionUpdateInput!): AbilityDescription!
  upsertAttributes(where: AttributesWhereUniqueInput!, create: AttributesCreateInput!, update: AttributesUpdateInput!): Attributes!
  upsertConditions(where: ConditionsWhereUniqueInput!, create: ConditionsCreateInput!, update: ConditionsUpdateInput!): Conditions!
  upsertPhysicalConditions(where: PhysicalConditionsWhereUniqueInput!, create: PhysicalConditionsCreateInput!, update: PhysicalConditionsUpdateInput!): PhysicalConditions!
  upsertSpiritualConditions(where: SpiritualConditionsWhereUniqueInput!, create: SpiritualConditionsCreateInput!, update: SpiritualConditionsUpdateInput!): SpiritualConditions!
  upsertFitness(where: FitnessWhereUniqueInput!, create: FitnessCreateInput!, update: FitnessUpdateInput!): Fitness!
  upsertCorruption(where: CorruptionWhereUniqueInput!, create: CorruptionCreateInput!, update: CorruptionUpdateInput!): Corruption!
  upsertPSymCreature(where: PSymCreatureWhereUniqueInput!, create: PSymCreatureCreateInput!, update: PSymCreatureUpdateInput!): PSymCreature!
  upsertPSymAbility(where: PSymAbilityWhereUniqueInput!, create: PSymAbilityCreateInput!, update: PSymAbilityUpdateInput!): PSymAbility!
  upsertPSymAbilityDescription(where: PSymAbilityDescriptionWhereUniqueInput!, create: PSymAbilityDescriptionCreateInput!, update: PSymAbilityDescriptionUpdateInput!): PSymAbilityDescription!
  upsertPAttributes(where: PAttributesWhereUniqueInput!, create: PAttributesCreateInput!, update: PAttributesUpdateInput!): PAttributes!
  upsertPConditions(where: PConditionsWhereUniqueInput!, create: PConditionsCreateInput!, update: PConditionsUpdateInput!): PConditions!
  upsertPPhysicalConditions(where: PPhysicalConditionsWhereUniqueInput!, create: PPhysicalConditionsCreateInput!, update: PPhysicalConditionsUpdateInput!): PPhysicalConditions!
  upsertPSpiritualConditions(where: PSpiritualConditionsWhereUniqueInput!, create: PSpiritualConditionsCreateInput!, update: PSpiritualConditionsUpdateInput!): PSpiritualConditions!
  upsertPFitness(where: PFitnessWhereUniqueInput!, create: PFitnessCreateInput!, update: PFitnessUpdateInput!): PFitness!
  upsertPCorruption(where: PCorruptionWhereUniqueInput!, create: PCorruptionCreateInput!, update: PCorruptionUpdateInput!): PCorruption!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyEvents(data: EventUpdateInput!, where: EventWhereInput): BatchPayload!
  updateManyCreatures(data: CreatureUpdateInput!, where: CreatureWhereInput): BatchPayload!
  updateManyAbilities(data: AbilityUpdateInput!, where: AbilityWhereInput): BatchPayload!
  updateManyAbilityDescriptions(data: AbilityDescriptionUpdateInput!, where: AbilityDescriptionWhereInput): BatchPayload!
  updateManyAttributeses(data: AttributesUpdateInput!, where: AttributesWhereInput): BatchPayload!
  updateManyConditionses(data: ConditionsUpdateInput!, where: ConditionsWhereInput): BatchPayload!
  updateManyPhysicalConditionses(data: PhysicalConditionsUpdateInput!, where: PhysicalConditionsWhereInput): BatchPayload!
  updateManySpiritualConditionses(data: SpiritualConditionsUpdateInput!, where: SpiritualConditionsWhereInput): BatchPayload!
  updateManyFitnesses(data: FitnessUpdateInput!, where: FitnessWhereInput): BatchPayload!
  updateManyCorruptions(data: CorruptionUpdateInput!, where: CorruptionWhereInput): BatchPayload!
  updateManyPSymCreatures(data: PSymCreatureUpdateInput!, where: PSymCreatureWhereInput): BatchPayload!
  updateManyPSymAbilities(data: PSymAbilityUpdateInput!, where: PSymAbilityWhereInput): BatchPayload!
  updateManyPSymAbilityDescriptions(data: PSymAbilityDescriptionUpdateInput!, where: PSymAbilityDescriptionWhereInput): BatchPayload!
  updateManyPAttributeses(data: PAttributesUpdateInput!, where: PAttributesWhereInput): BatchPayload!
  updateManyPConditionses(data: PConditionsUpdateInput!, where: PConditionsWhereInput): BatchPayload!
  updateManyPPhysicalConditionses(data: PPhysicalConditionsUpdateInput!, where: PPhysicalConditionsWhereInput): BatchPayload!
  updateManyPSpiritualConditionses(data: PSpiritualConditionsUpdateInput!, where: PSpiritualConditionsWhereInput): BatchPayload!
  updateManyPFitnesses(data: PFitnessUpdateInput!, where: PFitnessWhereInput): BatchPayload!
  updateManyPCorruptions(data: PCorruptionUpdateInput!, where: PCorruptionWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyEvents(where: EventWhereInput): BatchPayload!
  deleteManyCreatures(where: CreatureWhereInput): BatchPayload!
  deleteManyAbilities(where: AbilityWhereInput): BatchPayload!
  deleteManyAbilityDescriptions(where: AbilityDescriptionWhereInput): BatchPayload!
  deleteManyAttributeses(where: AttributesWhereInput): BatchPayload!
  deleteManyConditionses(where: ConditionsWhereInput): BatchPayload!
  deleteManyPhysicalConditionses(where: PhysicalConditionsWhereInput): BatchPayload!
  deleteManySpiritualConditionses(where: SpiritualConditionsWhereInput): BatchPayload!
  deleteManyFitnesses(where: FitnessWhereInput): BatchPayload!
  deleteManyCorruptions(where: CorruptionWhereInput): BatchPayload!
  deleteManyPSymCreatures(where: PSymCreatureWhereInput): BatchPayload!
  deleteManyPSymAbilities(where: PSymAbilityWhereInput): BatchPayload!
  deleteManyPSymAbilityDescriptions(where: PSymAbilityDescriptionWhereInput): BatchPayload!
  deleteManyPAttributeses(where: PAttributesWhereInput): BatchPayload!
  deleteManyPConditionses(where: PConditionsWhereInput): BatchPayload!
  deleteManyPPhysicalConditionses(where: PPhysicalConditionsWhereInput): BatchPayload!
  deleteManyPSpiritualConditionses(where: PSpiritualConditionsWhereInput): BatchPayload!
  deleteManyPFitnesses(where: PFitnessWhereInput): BatchPayload!
  deleteManyPCorruptions(where: PCorruptionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PAttributes implements Node {
  id: ID!
  creature(where: PSymCreatureWhereInput): PSymCreature!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""A connection to a list of items."""
type PAttributesConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PAttributesEdge]!
  aggregate: AggregatePAttributes!
}

input PAttributesCreateInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
  creature: PSymCreatureCreateOneWithoutAttributesInput!
}

input PAttributesCreateOneWithoutCreatureInput {
  create: PAttributesCreateWithoutCreatureInput
  connect: PAttributesWhereUniqueInput
}

input PAttributesCreateWithoutCreatureInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

"""An edge in a connection."""
type PAttributesEdge {
  """The item at the end of the edge."""
  node: PAttributes!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PAttributesOrderByInput {
  id_ASC
  id_DESC
  accurate_ASC
  accurate_DESC
  cunning_ASC
  cunning_DESC
  discreet_ASC
  discreet_DESC
  persuasive_ASC
  persuasive_DESC
  quick_ASC
  quick_DESC
  resolute_ASC
  resolute_DESC
  strong_ASC
  strong_DESC
  vigilant_ASC
  vigilant_DESC
  defense_ASC
  defense_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PAttributesPreviousValues {
  id: ID!
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

type PAttributesSubscriptionPayload {
  mutation: MutationType!
  node: PAttributes
  updatedFields: [String!]
  previousValues: PAttributesPreviousValues
}

input PAttributesSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PAttributesSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PAttributesSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PAttributesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PAttributesWhereInput
}

input PAttributesUpdateInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
  creature: PSymCreatureUpdateOneWithoutAttributesInput
}

input PAttributesUpdateOneWithoutCreatureInput {
  create: PAttributesCreateWithoutCreatureInput
  connect: PAttributesWhereUniqueInput
  delete: Boolean
  update: PAttributesUpdateWithoutCreatureDataInput
  upsert: PAttributesUpsertWithoutCreatureInput
}

input PAttributesUpdateWithoutCreatureDataInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
}

input PAttributesUpsertWithoutCreatureInput {
  update: PAttributesUpdateWithoutCreatureDataInput!
  create: PAttributesCreateWithoutCreatureInput!
}

input PAttributesWhereInput {
  """Logical AND on all given filters."""
  AND: [PAttributesWhereInput!]

  """Logical OR on all given filters."""
  OR: [PAttributesWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PAttributesWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  accurate: Int

  """All values that are not equal to given value."""
  accurate_not: Int

  """All values that are contained in given list."""
  accurate_in: [Int!]

  """All values that are not contained in given list."""
  accurate_not_in: [Int!]

  """All values less than the given value."""
  accurate_lt: Int

  """All values less than or equal the given value."""
  accurate_lte: Int

  """All values greater than the given value."""
  accurate_gt: Int

  """All values greater than or equal the given value."""
  accurate_gte: Int
  cunning: Int

  """All values that are not equal to given value."""
  cunning_not: Int

  """All values that are contained in given list."""
  cunning_in: [Int!]

  """All values that are not contained in given list."""
  cunning_not_in: [Int!]

  """All values less than the given value."""
  cunning_lt: Int

  """All values less than or equal the given value."""
  cunning_lte: Int

  """All values greater than the given value."""
  cunning_gt: Int

  """All values greater than or equal the given value."""
  cunning_gte: Int
  discreet: Int

  """All values that are not equal to given value."""
  discreet_not: Int

  """All values that are contained in given list."""
  discreet_in: [Int!]

  """All values that are not contained in given list."""
  discreet_not_in: [Int!]

  """All values less than the given value."""
  discreet_lt: Int

  """All values less than or equal the given value."""
  discreet_lte: Int

  """All values greater than the given value."""
  discreet_gt: Int

  """All values greater than or equal the given value."""
  discreet_gte: Int
  persuasive: Int

  """All values that are not equal to given value."""
  persuasive_not: Int

  """All values that are contained in given list."""
  persuasive_in: [Int!]

  """All values that are not contained in given list."""
  persuasive_not_in: [Int!]

  """All values less than the given value."""
  persuasive_lt: Int

  """All values less than or equal the given value."""
  persuasive_lte: Int

  """All values greater than the given value."""
  persuasive_gt: Int

  """All values greater than or equal the given value."""
  persuasive_gte: Int
  quick: Int

  """All values that are not equal to given value."""
  quick_not: Int

  """All values that are contained in given list."""
  quick_in: [Int!]

  """All values that are not contained in given list."""
  quick_not_in: [Int!]

  """All values less than the given value."""
  quick_lt: Int

  """All values less than or equal the given value."""
  quick_lte: Int

  """All values greater than the given value."""
  quick_gt: Int

  """All values greater than or equal the given value."""
  quick_gte: Int
  resolute: Int

  """All values that are not equal to given value."""
  resolute_not: Int

  """All values that are contained in given list."""
  resolute_in: [Int!]

  """All values that are not contained in given list."""
  resolute_not_in: [Int!]

  """All values less than the given value."""
  resolute_lt: Int

  """All values less than or equal the given value."""
  resolute_lte: Int

  """All values greater than the given value."""
  resolute_gt: Int

  """All values greater than or equal the given value."""
  resolute_gte: Int
  strong: Int

  """All values that are not equal to given value."""
  strong_not: Int

  """All values that are contained in given list."""
  strong_in: [Int!]

  """All values that are not contained in given list."""
  strong_not_in: [Int!]

  """All values less than the given value."""
  strong_lt: Int

  """All values less than or equal the given value."""
  strong_lte: Int

  """All values greater than the given value."""
  strong_gt: Int

  """All values greater than or equal the given value."""
  strong_gte: Int
  vigilant: Int

  """All values that are not equal to given value."""
  vigilant_not: Int

  """All values that are contained in given list."""
  vigilant_in: [Int!]

  """All values that are not contained in given list."""
  vigilant_not_in: [Int!]

  """All values less than the given value."""
  vigilant_lt: Int

  """All values less than or equal the given value."""
  vigilant_lte: Int

  """All values greater than the given value."""
  vigilant_gt: Int

  """All values greater than or equal the given value."""
  vigilant_gte: Int
  defense: Int

  """All values that are not equal to given value."""
  defense_not: Int

  """All values that are contained in given list."""
  defense_in: [Int!]

  """All values that are not contained in given list."""
  defense_not_in: [Int!]

  """All values less than the given value."""
  defense_lt: Int

  """All values less than or equal the given value."""
  defense_lte: Int

  """All values greater than the given value."""
  defense_gt: Int

  """All values greater than or equal the given value."""
  defense_gte: Int
  creature: PSymCreatureWhereInput
}

input PAttributesWhereUniqueInput {
  id: ID
}

type PConditions implements Node {
  id: ID!
  creature(where: PSymCreatureWhereInput): PSymCreature!
  physical(where: PPhysicalConditionsWhereInput): PPhysicalConditions!
  spiritual(where: PSpiritualConditionsWhereInput): PSpiritualConditions!
}

"""A connection to a list of items."""
type PConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PConditionsEdge]!
  aggregate: AggregatePConditions!
}

input PConditionsCreateInput {
  creature: PSymCreatureCreateOneWithoutConditionsInput!
  physical: PPhysicalConditionsCreateOneWithoutConditionsInput!
  spiritual: PSpiritualConditionsCreateOneWithoutConditionsInput!
}

input PConditionsCreateOneWithoutCreatureInput {
  create: PConditionsCreateWithoutCreatureInput
  connect: PConditionsWhereUniqueInput
}

input PConditionsCreateOneWithoutPhysicalInput {
  create: PConditionsCreateWithoutPhysicalInput
  connect: PConditionsWhereUniqueInput
}

input PConditionsCreateOneWithoutSpiritualInput {
  create: PConditionsCreateWithoutSpiritualInput
  connect: PConditionsWhereUniqueInput
}

input PConditionsCreateWithoutCreatureInput {
  physical: PPhysicalConditionsCreateOneWithoutConditionsInput!
  spiritual: PSpiritualConditionsCreateOneWithoutConditionsInput!
}

input PConditionsCreateWithoutPhysicalInput {
  creature: PSymCreatureCreateOneWithoutConditionsInput!
  spiritual: PSpiritualConditionsCreateOneWithoutConditionsInput!
}

input PConditionsCreateWithoutSpiritualInput {
  creature: PSymCreatureCreateOneWithoutConditionsInput!
  physical: PPhysicalConditionsCreateOneWithoutConditionsInput!
}

"""An edge in a connection."""
type PConditionsEdge {
  """The item at the end of the edge."""
  node: PConditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PConditionsPreviousValues {
  id: ID!
}

type PConditionsSubscriptionPayload {
  mutation: MutationType!
  node: PConditions
  updatedFields: [String!]
  previousValues: PConditionsPreviousValues
}

input PConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PConditionsWhereInput
}

input PConditionsUpdateInput {
  creature: PSymCreatureUpdateOneWithoutConditionsInput
  physical: PPhysicalConditionsUpdateOneWithoutConditionsInput
  spiritual: PSpiritualConditionsUpdateOneWithoutConditionsInput
}

input PConditionsUpdateOneWithoutCreatureInput {
  create: PConditionsCreateWithoutCreatureInput
  connect: PConditionsWhereUniqueInput
  delete: Boolean
  update: PConditionsUpdateWithoutCreatureDataInput
  upsert: PConditionsUpsertWithoutCreatureInput
}

input PConditionsUpdateOneWithoutPhysicalInput {
  create: PConditionsCreateWithoutPhysicalInput
  connect: PConditionsWhereUniqueInput
  delete: Boolean
  update: PConditionsUpdateWithoutPhysicalDataInput
  upsert: PConditionsUpsertWithoutPhysicalInput
}

input PConditionsUpdateOneWithoutSpiritualInput {
  create: PConditionsCreateWithoutSpiritualInput
  connect: PConditionsWhereUniqueInput
  delete: Boolean
  update: PConditionsUpdateWithoutSpiritualDataInput
  upsert: PConditionsUpsertWithoutSpiritualInput
}

input PConditionsUpdateWithoutCreatureDataInput {
  physical: PPhysicalConditionsUpdateOneWithoutConditionsInput
  spiritual: PSpiritualConditionsUpdateOneWithoutConditionsInput
}

input PConditionsUpdateWithoutPhysicalDataInput {
  creature: PSymCreatureUpdateOneWithoutConditionsInput
  spiritual: PSpiritualConditionsUpdateOneWithoutConditionsInput
}

input PConditionsUpdateWithoutSpiritualDataInput {
  creature: PSymCreatureUpdateOneWithoutConditionsInput
  physical: PPhysicalConditionsUpdateOneWithoutConditionsInput
}

input PConditionsUpsertWithoutCreatureInput {
  update: PConditionsUpdateWithoutCreatureDataInput!
  create: PConditionsCreateWithoutCreatureInput!
}

input PConditionsUpsertWithoutPhysicalInput {
  update: PConditionsUpdateWithoutPhysicalDataInput!
  create: PConditionsCreateWithoutPhysicalInput!
}

input PConditionsUpsertWithoutSpiritualInput {
  update: PConditionsUpdateWithoutSpiritualDataInput!
  create: PConditionsCreateWithoutSpiritualInput!
}

input PConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [PConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  creature: PSymCreatureWhereInput
  physical: PPhysicalConditionsWhereInput
  spiritual: PSpiritualConditionsWhereInput
}

input PConditionsWhereUniqueInput {
  id: ID
}

type PCorruption implements Node {
  id: ID!
  spiritualConditions(where: PSpiritualConditionsWhereInput): PSpiritualConditions!
  current: Int!
  threshold: Int!
  permanent: Int!
}

"""A connection to a list of items."""
type PCorruptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PCorruptionEdge]!
  aggregate: AggregatePCorruption!
}

input PCorruptionCreateInput {
  current: Int!
  threshold: Int!
  permanent: Int!
  spiritualConditions: PSpiritualConditionsCreateOneWithoutCorruptionInput!
}

input PCorruptionCreateOneWithoutSpiritualConditionsInput {
  create: PCorruptionCreateWithoutSpiritualConditionsInput
  connect: PCorruptionWhereUniqueInput
}

input PCorruptionCreateWithoutSpiritualConditionsInput {
  current: Int!
  threshold: Int!
  permanent: Int!
}

"""An edge in a connection."""
type PCorruptionEdge {
  """The item at the end of the edge."""
  node: PCorruption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PCorruptionOrderByInput {
  id_ASC
  id_DESC
  current_ASC
  current_DESC
  threshold_ASC
  threshold_DESC
  permanent_ASC
  permanent_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PCorruptionPreviousValues {
  id: ID!
  current: Int!
  threshold: Int!
  permanent: Int!
}

type PCorruptionSubscriptionPayload {
  mutation: MutationType!
  node: PCorruption
  updatedFields: [String!]
  previousValues: PCorruptionPreviousValues
}

input PCorruptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PCorruptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PCorruptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PCorruptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PCorruptionWhereInput
}

input PCorruptionUpdateInput {
  current: Int
  threshold: Int
  permanent: Int
  spiritualConditions: PSpiritualConditionsUpdateOneWithoutCorruptionInput
}

input PCorruptionUpdateOneWithoutSpiritualConditionsInput {
  create: PCorruptionCreateWithoutSpiritualConditionsInput
  connect: PCorruptionWhereUniqueInput
  delete: Boolean
  update: PCorruptionUpdateWithoutSpiritualConditionsDataInput
  upsert: PCorruptionUpsertWithoutSpiritualConditionsInput
}

input PCorruptionUpdateWithoutSpiritualConditionsDataInput {
  current: Int
  threshold: Int
  permanent: Int
}

input PCorruptionUpsertWithoutSpiritualConditionsInput {
  update: PCorruptionUpdateWithoutSpiritualConditionsDataInput!
  create: PCorruptionCreateWithoutSpiritualConditionsInput!
}

input PCorruptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PCorruptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PCorruptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PCorruptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  current: Int

  """All values that are not equal to given value."""
  current_not: Int

  """All values that are contained in given list."""
  current_in: [Int!]

  """All values that are not contained in given list."""
  current_not_in: [Int!]

  """All values less than the given value."""
  current_lt: Int

  """All values less than or equal the given value."""
  current_lte: Int

  """All values greater than the given value."""
  current_gt: Int

  """All values greater than or equal the given value."""
  current_gte: Int
  threshold: Int

  """All values that are not equal to given value."""
  threshold_not: Int

  """All values that are contained in given list."""
  threshold_in: [Int!]

  """All values that are not contained in given list."""
  threshold_not_in: [Int!]

  """All values less than the given value."""
  threshold_lt: Int

  """All values less than or equal the given value."""
  threshold_lte: Int

  """All values greater than the given value."""
  threshold_gt: Int

  """All values greater than or equal the given value."""
  threshold_gte: Int
  permanent: Int

  """All values that are not equal to given value."""
  permanent_not: Int

  """All values that are contained in given list."""
  permanent_in: [Int!]

  """All values that are not contained in given list."""
  permanent_not_in: [Int!]

  """All values less than the given value."""
  permanent_lt: Int

  """All values less than or equal the given value."""
  permanent_lte: Int

  """All values greater than the given value."""
  permanent_gt: Int

  """All values greater than or equal the given value."""
  permanent_gte: Int
  spiritualConditions: PSpiritualConditionsWhereInput
}

input PCorruptionWhereUniqueInput {
  id: ID
}

type PFitness implements Node {
  id: ID!
  physicalConditions(where: PPhysicalConditionsWhereInput): PPhysicalConditions!
  toughness: Int!
  painThreshold: Int!
}

"""A connection to a list of items."""
type PFitnessConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PFitnessEdge]!
  aggregate: AggregatePFitness!
}

input PFitnessCreateInput {
  toughness: Int!
  painThreshold: Int!
  physicalConditions: PPhysicalConditionsCreateOneWithoutFitnessInput!
}

input PFitnessCreateOneWithoutPhysicalConditionsInput {
  create: PFitnessCreateWithoutPhysicalConditionsInput
  connect: PFitnessWhereUniqueInput
}

input PFitnessCreateWithoutPhysicalConditionsInput {
  toughness: Int!
  painThreshold: Int!
}

"""An edge in a connection."""
type PFitnessEdge {
  """The item at the end of the edge."""
  node: PFitness!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PFitnessOrderByInput {
  id_ASC
  id_DESC
  toughness_ASC
  toughness_DESC
  painThreshold_ASC
  painThreshold_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PFitnessPreviousValues {
  id: ID!
  toughness: Int!
  painThreshold: Int!
}

type PFitnessSubscriptionPayload {
  mutation: MutationType!
  node: PFitness
  updatedFields: [String!]
  previousValues: PFitnessPreviousValues
}

input PFitnessSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PFitnessSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PFitnessSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PFitnessSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PFitnessWhereInput
}

input PFitnessUpdateInput {
  toughness: Int
  painThreshold: Int
  physicalConditions: PPhysicalConditionsUpdateOneWithoutFitnessInput
}

input PFitnessUpdateOneWithoutPhysicalConditionsInput {
  create: PFitnessCreateWithoutPhysicalConditionsInput
  connect: PFitnessWhereUniqueInput
  delete: Boolean
  update: PFitnessUpdateWithoutPhysicalConditionsDataInput
  upsert: PFitnessUpsertWithoutPhysicalConditionsInput
}

input PFitnessUpdateWithoutPhysicalConditionsDataInput {
  toughness: Int
  painThreshold: Int
}

input PFitnessUpsertWithoutPhysicalConditionsInput {
  update: PFitnessUpdateWithoutPhysicalConditionsDataInput!
  create: PFitnessCreateWithoutPhysicalConditionsInput!
}

input PFitnessWhereInput {
  """Logical AND on all given filters."""
  AND: [PFitnessWhereInput!]

  """Logical OR on all given filters."""
  OR: [PFitnessWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PFitnessWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  toughness: Int

  """All values that are not equal to given value."""
  toughness_not: Int

  """All values that are contained in given list."""
  toughness_in: [Int!]

  """All values that are not contained in given list."""
  toughness_not_in: [Int!]

  """All values less than the given value."""
  toughness_lt: Int

  """All values less than or equal the given value."""
  toughness_lte: Int

  """All values greater than the given value."""
  toughness_gt: Int

  """All values greater than or equal the given value."""
  toughness_gte: Int
  painThreshold: Int

  """All values that are not equal to given value."""
  painThreshold_not: Int

  """All values that are contained in given list."""
  painThreshold_in: [Int!]

  """All values that are not contained in given list."""
  painThreshold_not_in: [Int!]

  """All values less than the given value."""
  painThreshold_lt: Int

  """All values less than or equal the given value."""
  painThreshold_lte: Int

  """All values greater than the given value."""
  painThreshold_gt: Int

  """All values greater than or equal the given value."""
  painThreshold_gte: Int
  physicalConditions: PPhysicalConditionsWhereInput
}

input PFitnessWhereUniqueInput {
  id: ID
}

type PhysicalConditions implements Node {
  id: ID!
  conditions(where: ConditionsWhereInput): Conditions!
  fitness(where: FitnessWhereInput): Fitness!
}

"""A connection to a list of items."""
type PhysicalConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhysicalConditionsEdge]!
  aggregate: AggregatePhysicalConditions!
}

input PhysicalConditionsCreateInput {
  conditions: ConditionsCreateOneWithoutPhysicalInput!
  fitness: FitnessCreateOneWithoutPhysicalConditionsInput!
}

input PhysicalConditionsCreateOneWithoutConditionsInput {
  create: PhysicalConditionsCreateWithoutConditionsInput
  connect: PhysicalConditionsWhereUniqueInput
}

input PhysicalConditionsCreateOneWithoutFitnessInput {
  create: PhysicalConditionsCreateWithoutFitnessInput
  connect: PhysicalConditionsWhereUniqueInput
}

input PhysicalConditionsCreateWithoutConditionsInput {
  fitness: FitnessCreateOneWithoutPhysicalConditionsInput!
}

input PhysicalConditionsCreateWithoutFitnessInput {
  conditions: ConditionsCreateOneWithoutPhysicalInput!
}

"""An edge in a connection."""
type PhysicalConditionsEdge {
  """The item at the end of the edge."""
  node: PhysicalConditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhysicalConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PhysicalConditionsPreviousValues {
  id: ID!
}

type PhysicalConditionsSubscriptionPayload {
  mutation: MutationType!
  node: PhysicalConditions
  updatedFields: [String!]
  previousValues: PhysicalConditionsPreviousValues
}

input PhysicalConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhysicalConditionsWhereInput
}

input PhysicalConditionsUpdateInput {
  conditions: ConditionsUpdateOneWithoutPhysicalInput
  fitness: FitnessUpdateOneWithoutPhysicalConditionsInput
}

input PhysicalConditionsUpdateOneWithoutConditionsInput {
  create: PhysicalConditionsCreateWithoutConditionsInput
  connect: PhysicalConditionsWhereUniqueInput
  delete: Boolean
  update: PhysicalConditionsUpdateWithoutConditionsDataInput
  upsert: PhysicalConditionsUpsertWithoutConditionsInput
}

input PhysicalConditionsUpdateOneWithoutFitnessInput {
  create: PhysicalConditionsCreateWithoutFitnessInput
  connect: PhysicalConditionsWhereUniqueInput
  delete: Boolean
  update: PhysicalConditionsUpdateWithoutFitnessDataInput
  upsert: PhysicalConditionsUpsertWithoutFitnessInput
}

input PhysicalConditionsUpdateWithoutConditionsDataInput {
  fitness: FitnessUpdateOneWithoutPhysicalConditionsInput
}

input PhysicalConditionsUpdateWithoutFitnessDataInput {
  conditions: ConditionsUpdateOneWithoutPhysicalInput
}

input PhysicalConditionsUpsertWithoutConditionsInput {
  update: PhysicalConditionsUpdateWithoutConditionsDataInput!
  create: PhysicalConditionsCreateWithoutConditionsInput!
}

input PhysicalConditionsUpsertWithoutFitnessInput {
  update: PhysicalConditionsUpdateWithoutFitnessDataInput!
  create: PhysicalConditionsCreateWithoutFitnessInput!
}

input PhysicalConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [PhysicalConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhysicalConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhysicalConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  conditions: ConditionsWhereInput
  fitness: FitnessWhereInput
}

input PhysicalConditionsWhereUniqueInput {
  id: ID
}

type PPhysicalConditions implements Node {
  id: ID!
  conditions(where: PConditionsWhereInput): PConditions!
  fitness(where: PFitnessWhereInput): PFitness!
}

"""A connection to a list of items."""
type PPhysicalConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PPhysicalConditionsEdge]!
  aggregate: AggregatePPhysicalConditions!
}

input PPhysicalConditionsCreateInput {
  conditions: PConditionsCreateOneWithoutPhysicalInput!
  fitness: PFitnessCreateOneWithoutPhysicalConditionsInput!
}

input PPhysicalConditionsCreateOneWithoutConditionsInput {
  create: PPhysicalConditionsCreateWithoutConditionsInput
  connect: PPhysicalConditionsWhereUniqueInput
}

input PPhysicalConditionsCreateOneWithoutFitnessInput {
  create: PPhysicalConditionsCreateWithoutFitnessInput
  connect: PPhysicalConditionsWhereUniqueInput
}

input PPhysicalConditionsCreateWithoutConditionsInput {
  fitness: PFitnessCreateOneWithoutPhysicalConditionsInput!
}

input PPhysicalConditionsCreateWithoutFitnessInput {
  conditions: PConditionsCreateOneWithoutPhysicalInput!
}

"""An edge in a connection."""
type PPhysicalConditionsEdge {
  """The item at the end of the edge."""
  node: PPhysicalConditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PPhysicalConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PPhysicalConditionsPreviousValues {
  id: ID!
}

type PPhysicalConditionsSubscriptionPayload {
  mutation: MutationType!
  node: PPhysicalConditions
  updatedFields: [String!]
  previousValues: PPhysicalConditionsPreviousValues
}

input PPhysicalConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PPhysicalConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PPhysicalConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PPhysicalConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PPhysicalConditionsWhereInput
}

input PPhysicalConditionsUpdateInput {
  conditions: PConditionsUpdateOneWithoutPhysicalInput
  fitness: PFitnessUpdateOneWithoutPhysicalConditionsInput
}

input PPhysicalConditionsUpdateOneWithoutConditionsInput {
  create: PPhysicalConditionsCreateWithoutConditionsInput
  connect: PPhysicalConditionsWhereUniqueInput
  delete: Boolean
  update: PPhysicalConditionsUpdateWithoutConditionsDataInput
  upsert: PPhysicalConditionsUpsertWithoutConditionsInput
}

input PPhysicalConditionsUpdateOneWithoutFitnessInput {
  create: PPhysicalConditionsCreateWithoutFitnessInput
  connect: PPhysicalConditionsWhereUniqueInput
  delete: Boolean
  update: PPhysicalConditionsUpdateWithoutFitnessDataInput
  upsert: PPhysicalConditionsUpsertWithoutFitnessInput
}

input PPhysicalConditionsUpdateWithoutConditionsDataInput {
  fitness: PFitnessUpdateOneWithoutPhysicalConditionsInput
}

input PPhysicalConditionsUpdateWithoutFitnessDataInput {
  conditions: PConditionsUpdateOneWithoutPhysicalInput
}

input PPhysicalConditionsUpsertWithoutConditionsInput {
  update: PPhysicalConditionsUpdateWithoutConditionsDataInput!
  create: PPhysicalConditionsCreateWithoutConditionsInput!
}

input PPhysicalConditionsUpsertWithoutFitnessInput {
  update: PPhysicalConditionsUpdateWithoutFitnessDataInput!
  create: PPhysicalConditionsCreateWithoutFitnessInput!
}

input PPhysicalConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [PPhysicalConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PPhysicalConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PPhysicalConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  conditions: PConditionsWhereInput
  fitness: PFitnessWhereInput
}

input PPhysicalConditionsWhereUniqueInput {
  id: ID
}

type Project implements Node {
  id: ID!
  title: String!
  description: String
  rulebook: Rulebook!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  title: String!
  description: String
  rulebook: Rulebook!
  events: EventCreateManyWithoutProjectInput
  author: UserCreateOneWithoutProjectsInput!
}

input ProjectCreateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateOneWithoutEventsInput {
  create: ProjectCreateWithoutEventsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutAuthorInput {
  title: String!
  description: String
  rulebook: Rulebook!
  events: EventCreateManyWithoutProjectInput
}

input ProjectCreateWithoutEventsInput {
  title: String!
  description: String
  rulebook: Rulebook!
  author: UserCreateOneWithoutProjectsInput!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  rulebook_ASC
  rulebook_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  title: String!
  description: String
  rulebook: Rulebook!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateInput {
  title: String
  description: String
  rulebook: Rulebook
  events: EventUpdateManyWithoutProjectInput
  author: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateManyWithoutAuthorInput {
  create: [ProjectCreateWithoutAuthorInput!]
  connect: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ProjectUpdateOneWithoutEventsInput {
  create: ProjectCreateWithoutEventsInput
  connect: ProjectWhereUniqueInput
  delete: Boolean
  update: ProjectUpdateWithoutEventsDataInput
  upsert: ProjectUpsertWithoutEventsInput
}

input ProjectUpdateWithoutAuthorDataInput {
  title: String
  description: String
  rulebook: Rulebook
  events: EventUpdateManyWithoutProjectInput
}

input ProjectUpdateWithoutEventsDataInput {
  title: String
  description: String
  rulebook: Rulebook
  author: UserUpdateOneWithoutProjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAuthorDataInput!
}

input ProjectUpsertWithoutEventsInput {
  update: ProjectUpdateWithoutEventsDataInput!
  create: ProjectCreateWithoutEventsInput!
}

input ProjectUpsertWithWhereUniqueWithoutAuthorInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAuthorDataInput!
  create: ProjectCreateWithoutAuthorInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  rulebook: Rulebook

  """All values that are not equal to given value."""
  rulebook_not: Rulebook

  """All values that are contained in given list."""
  rulebook_in: [Rulebook!]

  """All values that are not contained in given list."""
  rulebook_not_in: [Rulebook!]
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  author: UserWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type PSpiritualConditions implements Node {
  id: ID!
  conditions(where: PConditionsWhereInput): PConditions!
  corruption(where: PCorruptionWhereInput): PCorruption!
}

"""A connection to a list of items."""
type PSpiritualConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PSpiritualConditionsEdge]!
  aggregate: AggregatePSpiritualConditions!
}

input PSpiritualConditionsCreateInput {
  conditions: PConditionsCreateOneWithoutSpiritualInput!
  corruption: PCorruptionCreateOneWithoutSpiritualConditionsInput!
}

input PSpiritualConditionsCreateOneWithoutConditionsInput {
  create: PSpiritualConditionsCreateWithoutConditionsInput
  connect: PSpiritualConditionsWhereUniqueInput
}

input PSpiritualConditionsCreateOneWithoutCorruptionInput {
  create: PSpiritualConditionsCreateWithoutCorruptionInput
  connect: PSpiritualConditionsWhereUniqueInput
}

input PSpiritualConditionsCreateWithoutConditionsInput {
  corruption: PCorruptionCreateOneWithoutSpiritualConditionsInput!
}

input PSpiritualConditionsCreateWithoutCorruptionInput {
  conditions: PConditionsCreateOneWithoutSpiritualInput!
}

"""An edge in a connection."""
type PSpiritualConditionsEdge {
  """The item at the end of the edge."""
  node: PSpiritualConditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PSpiritualConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PSpiritualConditionsPreviousValues {
  id: ID!
}

type PSpiritualConditionsSubscriptionPayload {
  mutation: MutationType!
  node: PSpiritualConditions
  updatedFields: [String!]
  previousValues: PSpiritualConditionsPreviousValues
}

input PSpiritualConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PSpiritualConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSpiritualConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSpiritualConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PSpiritualConditionsWhereInput
}

input PSpiritualConditionsUpdateInput {
  conditions: PConditionsUpdateOneWithoutSpiritualInput
  corruption: PCorruptionUpdateOneWithoutSpiritualConditionsInput
}

input PSpiritualConditionsUpdateOneWithoutConditionsInput {
  create: PSpiritualConditionsCreateWithoutConditionsInput
  connect: PSpiritualConditionsWhereUniqueInput
  delete: Boolean
  update: PSpiritualConditionsUpdateWithoutConditionsDataInput
  upsert: PSpiritualConditionsUpsertWithoutConditionsInput
}

input PSpiritualConditionsUpdateOneWithoutCorruptionInput {
  create: PSpiritualConditionsCreateWithoutCorruptionInput
  connect: PSpiritualConditionsWhereUniqueInput
  delete: Boolean
  update: PSpiritualConditionsUpdateWithoutCorruptionDataInput
  upsert: PSpiritualConditionsUpsertWithoutCorruptionInput
}

input PSpiritualConditionsUpdateWithoutConditionsDataInput {
  corruption: PCorruptionUpdateOneWithoutSpiritualConditionsInput
}

input PSpiritualConditionsUpdateWithoutCorruptionDataInput {
  conditions: PConditionsUpdateOneWithoutSpiritualInput
}

input PSpiritualConditionsUpsertWithoutConditionsInput {
  update: PSpiritualConditionsUpdateWithoutConditionsDataInput!
  create: PSpiritualConditionsCreateWithoutConditionsInput!
}

input PSpiritualConditionsUpsertWithoutCorruptionInput {
  update: PSpiritualConditionsUpdateWithoutCorruptionDataInput!
  create: PSpiritualConditionsCreateWithoutCorruptionInput!
}

input PSpiritualConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [PSpiritualConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSpiritualConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSpiritualConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  conditions: PConditionsWhereInput
  corruption: PCorruptionWhereInput
}

input PSpiritualConditionsWhereUniqueInput {
  id: ID
}

type PSymAbility implements Node {
  id: ID!
  creature(where: PSymCreatureWhereInput): PSymCreature!
  title: String!
  description(where: PSymAbilityDescriptionWhereInput, orderBy: PSymAbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSymAbilityDescription!]
}

"""A connection to a list of items."""
type PSymAbilityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PSymAbilityEdge]!
  aggregate: AggregatePSymAbility!
}

input PSymAbilityCreateInput {
  title: String!
  creature: PSymCreatureCreateOneWithoutAbilitiesInput!
  description: PSymAbilityDescriptionCreateManyWithoutAbilityInput
}

input PSymAbilityCreateManyWithoutCreatureInput {
  create: [PSymAbilityCreateWithoutCreatureInput!]
  connect: [PSymAbilityWhereUniqueInput!]
}

input PSymAbilityCreateOneWithoutDescriptionInput {
  create: PSymAbilityCreateWithoutDescriptionInput
  connect: PSymAbilityWhereUniqueInput
}

input PSymAbilityCreateWithoutCreatureInput {
  title: String!
  description: PSymAbilityDescriptionCreateManyWithoutAbilityInput
}

input PSymAbilityCreateWithoutDescriptionInput {
  title: String!
  creature: PSymCreatureCreateOneWithoutAbilitiesInput!
}

type PSymAbilityDescription implements Node {
  id: ID!
  ability(where: PSymAbilityWhereInput): PSymAbility!
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

"""A connection to a list of items."""
type PSymAbilityDescriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PSymAbilityDescriptionEdge]!
  aggregate: AggregatePSymAbilityDescription!
}

input PSymAbilityDescriptionCreateInput {
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
  ability: PSymAbilityCreateOneWithoutDescriptionInput!
}

input PSymAbilityDescriptionCreateManyWithoutAbilityInput {
  create: [PSymAbilityDescriptionCreateWithoutAbilityInput!]
  connect: [PSymAbilityDescriptionWhereUniqueInput!]
}

input PSymAbilityDescriptionCreateWithoutAbilityInput {
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

"""An edge in a connection."""
type PSymAbilityDescriptionEdge {
  """The item at the end of the edge."""
  node: PSymAbilityDescription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PSymAbilityDescriptionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  rank_ASC
  rank_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PSymAbilityDescriptionPreviousValues {
  id: ID!
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

type PSymAbilityDescriptionSubscriptionPayload {
  mutation: MutationType!
  node: PSymAbilityDescription
  updatedFields: [String!]
  previousValues: PSymAbilityDescriptionPreviousValues
}

input PSymAbilityDescriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymAbilityDescriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymAbilityDescriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymAbilityDescriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PSymAbilityDescriptionWhereInput
}

input PSymAbilityDescriptionUpdateInput {
  type: SymAbilityType
  rank: SymAbilityRank
  description: String
  ability: PSymAbilityUpdateOneWithoutDescriptionInput
}

input PSymAbilityDescriptionUpdateManyWithoutAbilityInput {
  create: [PSymAbilityDescriptionCreateWithoutAbilityInput!]
  connect: [PSymAbilityDescriptionWhereUniqueInput!]
  disconnect: [PSymAbilityDescriptionWhereUniqueInput!]
  delete: [PSymAbilityDescriptionWhereUniqueInput!]
  update: [PSymAbilityDescriptionUpdateWithWhereUniqueWithoutAbilityInput!]
  upsert: [PSymAbilityDescriptionUpsertWithWhereUniqueWithoutAbilityInput!]
}

input PSymAbilityDescriptionUpdateWithoutAbilityDataInput {
  type: SymAbilityType
  rank: SymAbilityRank
  description: String
}

input PSymAbilityDescriptionUpdateWithWhereUniqueWithoutAbilityInput {
  where: PSymAbilityDescriptionWhereUniqueInput!
  data: PSymAbilityDescriptionUpdateWithoutAbilityDataInput!
}

input PSymAbilityDescriptionUpsertWithWhereUniqueWithoutAbilityInput {
  where: PSymAbilityDescriptionWhereUniqueInput!
  update: PSymAbilityDescriptionUpdateWithoutAbilityDataInput!
  create: PSymAbilityDescriptionCreateWithoutAbilityInput!
}

input PSymAbilityDescriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymAbilityDescriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymAbilityDescriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymAbilityDescriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: SymAbilityType

  """All values that are not equal to given value."""
  type_not: SymAbilityType

  """All values that are contained in given list."""
  type_in: [SymAbilityType!]

  """All values that are not contained in given list."""
  type_not_in: [SymAbilityType!]
  rank: SymAbilityRank

  """All values that are not equal to given value."""
  rank_not: SymAbilityRank

  """All values that are contained in given list."""
  rank_in: [SymAbilityRank!]

  """All values that are not contained in given list."""
  rank_not_in: [SymAbilityRank!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  ability: PSymAbilityWhereInput
}

input PSymAbilityDescriptionWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type PSymAbilityEdge {
  """The item at the end of the edge."""
  node: PSymAbility!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PSymAbilityOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PSymAbilityPreviousValues {
  id: ID!
  title: String!
}

type PSymAbilitySubscriptionPayload {
  mutation: MutationType!
  node: PSymAbility
  updatedFields: [String!]
  previousValues: PSymAbilityPreviousValues
}

input PSymAbilitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymAbilitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymAbilitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymAbilitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PSymAbilityWhereInput
}

input PSymAbilityUpdateInput {
  title: String
  creature: PSymCreatureUpdateOneWithoutAbilitiesInput
  description: PSymAbilityDescriptionUpdateManyWithoutAbilityInput
}

input PSymAbilityUpdateManyWithoutCreatureInput {
  create: [PSymAbilityCreateWithoutCreatureInput!]
  connect: [PSymAbilityWhereUniqueInput!]
  disconnect: [PSymAbilityWhereUniqueInput!]
  delete: [PSymAbilityWhereUniqueInput!]
  update: [PSymAbilityUpdateWithWhereUniqueWithoutCreatureInput!]
  upsert: [PSymAbilityUpsertWithWhereUniqueWithoutCreatureInput!]
}

input PSymAbilityUpdateOneWithoutDescriptionInput {
  create: PSymAbilityCreateWithoutDescriptionInput
  connect: PSymAbilityWhereUniqueInput
  delete: Boolean
  update: PSymAbilityUpdateWithoutDescriptionDataInput
  upsert: PSymAbilityUpsertWithoutDescriptionInput
}

input PSymAbilityUpdateWithoutCreatureDataInput {
  title: String
  description: PSymAbilityDescriptionUpdateManyWithoutAbilityInput
}

input PSymAbilityUpdateWithoutDescriptionDataInput {
  title: String
  creature: PSymCreatureUpdateOneWithoutAbilitiesInput
}

input PSymAbilityUpdateWithWhereUniqueWithoutCreatureInput {
  where: PSymAbilityWhereUniqueInput!
  data: PSymAbilityUpdateWithoutCreatureDataInput!
}

input PSymAbilityUpsertWithoutDescriptionInput {
  update: PSymAbilityUpdateWithoutDescriptionDataInput!
  create: PSymAbilityCreateWithoutDescriptionInput!
}

input PSymAbilityUpsertWithWhereUniqueWithoutCreatureInput {
  where: PSymAbilityWhereUniqueInput!
  update: PSymAbilityUpdateWithoutCreatureDataInput!
  create: PSymAbilityCreateWithoutCreatureInput!
}

input PSymAbilityWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymAbilityWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymAbilityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymAbilityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  creature: PSymCreatureWhereInput
  description_every: PSymAbilityDescriptionWhereInput
  description_some: PSymAbilityDescriptionWhereInput
  description_none: PSymAbilityDescriptionWhereInput
}

input PSymAbilityWhereUniqueInput {
  id: ID
}

type PSymCreature implements Node {
  id: ID!
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions(where: PConditionsWhereInput): PConditions!
  attributes(where: PAttributesWhereInput): PAttributes!
  abilities(where: PSymAbilityWhereInput, orderBy: PSymAbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSymAbility!]
}

"""A connection to a list of items."""
type PSymCreatureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PSymCreatureEdge]!
  aggregate: AggregatePSymCreature!
}

input PSymCreatureCreateInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions: PConditionsCreateOneWithoutCreatureInput!
  attributes: PAttributesCreateOneWithoutCreatureInput!
  abilities: PSymAbilityCreateManyWithoutCreatureInput
}

input PSymCreatureCreateOneWithoutAbilitiesInput {
  create: PSymCreatureCreateWithoutAbilitiesInput
  connect: PSymCreatureWhereUniqueInput
}

input PSymCreatureCreateOneWithoutAttributesInput {
  create: PSymCreatureCreateWithoutAttributesInput
  connect: PSymCreatureWhereUniqueInput
}

input PSymCreatureCreateOneWithoutConditionsInput {
  create: PSymCreatureCreateWithoutConditionsInput
  connect: PSymCreatureWhereUniqueInput
}

input PSymCreatureCreateWithoutAbilitiesInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions: PConditionsCreateOneWithoutCreatureInput!
  attributes: PAttributesCreateOneWithoutCreatureInput!
}

input PSymCreatureCreateWithoutAttributesInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions: PConditionsCreateOneWithoutCreatureInput!
  abilities: PSymAbilityCreateManyWithoutCreatureInput
}

input PSymCreatureCreateWithoutConditionsInput {
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  attributes: PAttributesCreateOneWithoutCreatureInput!
  abilities: PSymAbilityCreateManyWithoutCreatureInput
}

"""An edge in a connection."""
type PSymCreatureEdge {
  """The item at the end of the edge."""
  node: PSymCreature!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PSymCreatureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  race_ASC
  race_DESC
  shadow_ASC
  shadow_DESC
  rulebook_ASC
  rulebook_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PSymCreaturePreviousValues {
  id: ID!
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
}

type PSymCreatureSubscriptionPayload {
  mutation: MutationType!
  node: PSymCreature
  updatedFields: [String!]
  previousValues: PSymCreaturePreviousValues
}

input PSymCreatureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymCreatureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymCreatureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymCreatureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PSymCreatureWhereInput
}

input PSymCreatureUpdateInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  Conditions: PConditionsUpdateOneWithoutCreatureInput
  attributes: PAttributesUpdateOneWithoutCreatureInput
  abilities: PSymAbilityUpdateManyWithoutCreatureInput
}

input PSymCreatureUpdateOneWithoutAbilitiesInput {
  create: PSymCreatureCreateWithoutAbilitiesInput
  connect: PSymCreatureWhereUniqueInput
  delete: Boolean
  update: PSymCreatureUpdateWithoutAbilitiesDataInput
  upsert: PSymCreatureUpsertWithoutAbilitiesInput
}

input PSymCreatureUpdateOneWithoutAttributesInput {
  create: PSymCreatureCreateWithoutAttributesInput
  connect: PSymCreatureWhereUniqueInput
  delete: Boolean
  update: PSymCreatureUpdateWithoutAttributesDataInput
  upsert: PSymCreatureUpsertWithoutAttributesInput
}

input PSymCreatureUpdateOneWithoutConditionsInput {
  create: PSymCreatureCreateWithoutConditionsInput
  connect: PSymCreatureWhereUniqueInput
  delete: Boolean
  update: PSymCreatureUpdateWithoutConditionsDataInput
  upsert: PSymCreatureUpsertWithoutConditionsInput
}

input PSymCreatureUpdateWithoutAbilitiesDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  Conditions: PConditionsUpdateOneWithoutCreatureInput
  attributes: PAttributesUpdateOneWithoutCreatureInput
}

input PSymCreatureUpdateWithoutAttributesDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  Conditions: PConditionsUpdateOneWithoutCreatureInput
  abilities: PSymAbilityUpdateManyWithoutCreatureInput
}

input PSymCreatureUpdateWithoutConditionsDataInput {
  name: String
  race: String
  shadow: String
  rulebook: Rulebook
  attributes: PAttributesUpdateOneWithoutCreatureInput
  abilities: PSymAbilityUpdateManyWithoutCreatureInput
}

input PSymCreatureUpsertWithoutAbilitiesInput {
  update: PSymCreatureUpdateWithoutAbilitiesDataInput!
  create: PSymCreatureCreateWithoutAbilitiesInput!
}

input PSymCreatureUpsertWithoutAttributesInput {
  update: PSymCreatureUpdateWithoutAttributesDataInput!
  create: PSymCreatureCreateWithoutAttributesInput!
}

input PSymCreatureUpsertWithoutConditionsInput {
  update: PSymCreatureUpdateWithoutConditionsDataInput!
  create: PSymCreatureCreateWithoutConditionsInput!
}

input PSymCreatureWhereInput {
  """Logical AND on all given filters."""
  AND: [PSymCreatureWhereInput!]

  """Logical OR on all given filters."""
  OR: [PSymCreatureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PSymCreatureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  race: String

  """All values that are not equal to given value."""
  race_not: String

  """All values that are contained in given list."""
  race_in: [String!]

  """All values that are not contained in given list."""
  race_not_in: [String!]

  """All values less than the given value."""
  race_lt: String

  """All values less than or equal the given value."""
  race_lte: String

  """All values greater than the given value."""
  race_gt: String

  """All values greater than or equal the given value."""
  race_gte: String

  """All values containing the given string."""
  race_contains: String

  """All values not containing the given string."""
  race_not_contains: String

  """All values starting with the given string."""
  race_starts_with: String

  """All values not starting with the given string."""
  race_not_starts_with: String

  """All values ending with the given string."""
  race_ends_with: String

  """All values not ending with the given string."""
  race_not_ends_with: String
  shadow: String

  """All values that are not equal to given value."""
  shadow_not: String

  """All values that are contained in given list."""
  shadow_in: [String!]

  """All values that are not contained in given list."""
  shadow_not_in: [String!]

  """All values less than the given value."""
  shadow_lt: String

  """All values less than or equal the given value."""
  shadow_lte: String

  """All values greater than the given value."""
  shadow_gt: String

  """All values greater than or equal the given value."""
  shadow_gte: String

  """All values containing the given string."""
  shadow_contains: String

  """All values not containing the given string."""
  shadow_not_contains: String

  """All values starting with the given string."""
  shadow_starts_with: String

  """All values not starting with the given string."""
  shadow_not_starts_with: String

  """All values ending with the given string."""
  shadow_ends_with: String

  """All values not ending with the given string."""
  shadow_not_ends_with: String
  rulebook: Rulebook

  """All values that are not equal to given value."""
  rulebook_not: Rulebook

  """All values that are contained in given list."""
  rulebook_in: [Rulebook!]

  """All values that are not contained in given list."""
  rulebook_not_in: [Rulebook!]
  Conditions: PConditionsWhereInput
  attributes: PAttributesWhereInput
  abilities_every: PSymAbilityWhereInput
  abilities_some: PSymAbilityWhereInput
  abilities_none: PSymAbilityWhereInput
}

input PSymCreatureWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event]!
  creatures(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Creature]!
  abilities(where: AbilityWhereInput, orderBy: AbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ability]!
  abilityDescriptions(where: AbilityDescriptionWhereInput, orderBy: AbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AbilityDescription]!
  attributeses(where: AttributesWhereInput, orderBy: AttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Attributes]!
  conditionses(where: ConditionsWhereInput, orderBy: ConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Conditions]!
  physicalConditionses(where: PhysicalConditionsWhereInput, orderBy: PhysicalConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PhysicalConditions]!
  spiritualConditionses(where: SpiritualConditionsWhereInput, orderBy: SpiritualConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SpiritualConditions]!
  fitnesses(where: FitnessWhereInput, orderBy: FitnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fitness]!
  corruptions(where: CorruptionWhereInput, orderBy: CorruptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Corruption]!
  pSymCreatures(where: PSymCreatureWhereInput, orderBy: PSymCreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSymCreature]!
  pSymAbilities(where: PSymAbilityWhereInput, orderBy: PSymAbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSymAbility]!
  pSymAbilityDescriptions(where: PSymAbilityDescriptionWhereInput, orderBy: PSymAbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSymAbilityDescription]!
  pAttributeses(where: PAttributesWhereInput, orderBy: PAttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PAttributes]!
  pConditionses(where: PConditionsWhereInput, orderBy: PConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PConditions]!
  pPhysicalConditionses(where: PPhysicalConditionsWhereInput, orderBy: PPhysicalConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PPhysicalConditions]!
  pSpiritualConditionses(where: PSpiritualConditionsWhereInput, orderBy: PSpiritualConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PSpiritualConditions]!
  pFitnesses(where: PFitnessWhereInput, orderBy: PFitnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PFitness]!
  pCorruptions(where: PCorruptionWhereInput, orderBy: PCorruptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PCorruption]!
  user(where: UserWhereUniqueInput!): User
  project(where: ProjectWhereUniqueInput!): Project
  event(where: EventWhereUniqueInput!): Event
  creature(where: CreatureWhereUniqueInput!): Creature
  ability(where: AbilityWhereUniqueInput!): Ability
  abilityDescription(where: AbilityDescriptionWhereUniqueInput!): AbilityDescription
  attributes(where: AttributesWhereUniqueInput!): Attributes
  conditions(where: ConditionsWhereUniqueInput!): Conditions
  physicalConditions(where: PhysicalConditionsWhereUniqueInput!): PhysicalConditions
  spiritualConditions(where: SpiritualConditionsWhereUniqueInput!): SpiritualConditions
  fitness(where: FitnessWhereUniqueInput!): Fitness
  corruption(where: CorruptionWhereUniqueInput!): Corruption
  pSymCreature(where: PSymCreatureWhereUniqueInput!): PSymCreature
  pSymAbility(where: PSymAbilityWhereUniqueInput!): PSymAbility
  pSymAbilityDescription(where: PSymAbilityDescriptionWhereUniqueInput!): PSymAbilityDescription
  pAttributes(where: PAttributesWhereUniqueInput!): PAttributes
  pConditions(where: PConditionsWhereUniqueInput!): PConditions
  pPhysicalConditions(where: PPhysicalConditionsWhereUniqueInput!): PPhysicalConditions
  pSpiritualConditions(where: PSpiritualConditionsWhereUniqueInput!): PSpiritualConditions
  pFitness(where: PFitnessWhereUniqueInput!): PFitness
  pCorruption(where: PCorruptionWhereUniqueInput!): PCorruption
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  eventsConnection(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EventConnection!
  creaturesConnection(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreatureConnection!
  abilitiesConnection(where: AbilityWhereInput, orderBy: AbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AbilityConnection!
  abilityDescriptionsConnection(where: AbilityDescriptionWhereInput, orderBy: AbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AbilityDescriptionConnection!
  attributesesConnection(where: AttributesWhereInput, orderBy: AttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AttributesConnection!
  conditionsesConnection(where: ConditionsWhereInput, orderBy: ConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConditionsConnection!
  physicalConditionsesConnection(where: PhysicalConditionsWhereInput, orderBy: PhysicalConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhysicalConditionsConnection!
  spiritualConditionsesConnection(where: SpiritualConditionsWhereInput, orderBy: SpiritualConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpiritualConditionsConnection!
  fitnessesConnection(where: FitnessWhereInput, orderBy: FitnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FitnessConnection!
  corruptionsConnection(where: CorruptionWhereInput, orderBy: CorruptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CorruptionConnection!
  pSymCreaturesConnection(where: PSymCreatureWhereInput, orderBy: PSymCreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PSymCreatureConnection!
  pSymAbilitiesConnection(where: PSymAbilityWhereInput, orderBy: PSymAbilityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PSymAbilityConnection!
  pSymAbilityDescriptionsConnection(where: PSymAbilityDescriptionWhereInput, orderBy: PSymAbilityDescriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PSymAbilityDescriptionConnection!
  pAttributesesConnection(where: PAttributesWhereInput, orderBy: PAttributesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PAttributesConnection!
  pConditionsesConnection(where: PConditionsWhereInput, orderBy: PConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PConditionsConnection!
  pPhysicalConditionsesConnection(where: PPhysicalConditionsWhereInput, orderBy: PPhysicalConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PPhysicalConditionsConnection!
  pSpiritualConditionsesConnection(where: PSpiritualConditionsWhereInput, orderBy: PSpiritualConditionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PSpiritualConditionsConnection!
  pFitnessesConnection(where: PFitnessWhereInput, orderBy: PFitnessOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PFitnessConnection!
  pCorruptionsConnection(where: PCorruptionWhereInput, orderBy: PCorruptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PCorruptionConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Rulebook {
  SYMBAROUM
  COC
  DSA
}

type SpiritualConditions implements Node {
  id: ID!
  conditions(where: ConditionsWhereInput): Conditions!
  corruption(where: CorruptionWhereInput): Corruption!
}

"""A connection to a list of items."""
type SpiritualConditionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpiritualConditionsEdge]!
  aggregate: AggregateSpiritualConditions!
}

input SpiritualConditionsCreateInput {
  conditions: ConditionsCreateOneWithoutSpiritualInput!
  corruption: CorruptionCreateOneWithoutSpiritualConditionsInput!
}

input SpiritualConditionsCreateOneWithoutConditionsInput {
  create: SpiritualConditionsCreateWithoutConditionsInput
  connect: SpiritualConditionsWhereUniqueInput
}

input SpiritualConditionsCreateOneWithoutCorruptionInput {
  create: SpiritualConditionsCreateWithoutCorruptionInput
  connect: SpiritualConditionsWhereUniqueInput
}

input SpiritualConditionsCreateWithoutConditionsInput {
  corruption: CorruptionCreateOneWithoutSpiritualConditionsInput!
}

input SpiritualConditionsCreateWithoutCorruptionInput {
  conditions: ConditionsCreateOneWithoutSpiritualInput!
}

"""An edge in a connection."""
type SpiritualConditionsEdge {
  """The item at the end of the edge."""
  node: SpiritualConditions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpiritualConditionsOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpiritualConditionsPreviousValues {
  id: ID!
}

type SpiritualConditionsSubscriptionPayload {
  mutation: MutationType!
  node: SpiritualConditions
  updatedFields: [String!]
  previousValues: SpiritualConditionsPreviousValues
}

input SpiritualConditionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpiritualConditionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpiritualConditionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpiritualConditionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpiritualConditionsWhereInput
}

input SpiritualConditionsUpdateInput {
  conditions: ConditionsUpdateOneWithoutSpiritualInput
  corruption: CorruptionUpdateOneWithoutSpiritualConditionsInput
}

input SpiritualConditionsUpdateOneWithoutConditionsInput {
  create: SpiritualConditionsCreateWithoutConditionsInput
  connect: SpiritualConditionsWhereUniqueInput
  delete: Boolean
  update: SpiritualConditionsUpdateWithoutConditionsDataInput
  upsert: SpiritualConditionsUpsertWithoutConditionsInput
}

input SpiritualConditionsUpdateOneWithoutCorruptionInput {
  create: SpiritualConditionsCreateWithoutCorruptionInput
  connect: SpiritualConditionsWhereUniqueInput
  delete: Boolean
  update: SpiritualConditionsUpdateWithoutCorruptionDataInput
  upsert: SpiritualConditionsUpsertWithoutCorruptionInput
}

input SpiritualConditionsUpdateWithoutConditionsDataInput {
  corruption: CorruptionUpdateOneWithoutSpiritualConditionsInput
}

input SpiritualConditionsUpdateWithoutCorruptionDataInput {
  conditions: ConditionsUpdateOneWithoutSpiritualInput
}

input SpiritualConditionsUpsertWithoutConditionsInput {
  update: SpiritualConditionsUpdateWithoutConditionsDataInput!
  create: SpiritualConditionsCreateWithoutConditionsInput!
}

input SpiritualConditionsUpsertWithoutCorruptionInput {
  update: SpiritualConditionsUpdateWithoutCorruptionDataInput!
  create: SpiritualConditionsCreateWithoutCorruptionInput!
}

input SpiritualConditionsWhereInput {
  """Logical AND on all given filters."""
  AND: [SpiritualConditionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpiritualConditionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpiritualConditionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  conditions: ConditionsWhereInput
  corruption: CorruptionWhereInput
}

input SpiritualConditionsWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  event(where: EventSubscriptionWhereInput): EventSubscriptionPayload
  creature(where: CreatureSubscriptionWhereInput): CreatureSubscriptionPayload
  ability(where: AbilitySubscriptionWhereInput): AbilitySubscriptionPayload
  abilityDescription(where: AbilityDescriptionSubscriptionWhereInput): AbilityDescriptionSubscriptionPayload
  attributes(where: AttributesSubscriptionWhereInput): AttributesSubscriptionPayload
  conditions(where: ConditionsSubscriptionWhereInput): ConditionsSubscriptionPayload
  physicalConditions(where: PhysicalConditionsSubscriptionWhereInput): PhysicalConditionsSubscriptionPayload
  spiritualConditions(where: SpiritualConditionsSubscriptionWhereInput): SpiritualConditionsSubscriptionPayload
  fitness(where: FitnessSubscriptionWhereInput): FitnessSubscriptionPayload
  corruption(where: CorruptionSubscriptionWhereInput): CorruptionSubscriptionPayload
  pSymCreature(where: PSymCreatureSubscriptionWhereInput): PSymCreatureSubscriptionPayload
  pSymAbility(where: PSymAbilitySubscriptionWhereInput): PSymAbilitySubscriptionPayload
  pSymAbilityDescription(where: PSymAbilityDescriptionSubscriptionWhereInput): PSymAbilityDescriptionSubscriptionPayload
  pAttributes(where: PAttributesSubscriptionWhereInput): PAttributesSubscriptionPayload
  pConditions(where: PConditionsSubscriptionWhereInput): PConditionsSubscriptionPayload
  pPhysicalConditions(where: PPhysicalConditionsSubscriptionWhereInput): PPhysicalConditionsSubscriptionPayload
  pSpiritualConditions(where: PSpiritualConditionsSubscriptionWhereInput): PSpiritualConditionsSubscriptionPayload
  pFitness(where: PFitnessSubscriptionWhereInput): PFitnessSubscriptionPayload
  pCorruption(where: PCorruptionSubscriptionWhereInput): PCorruptionSubscriptionPayload
}

enum SymAbilityRank {
  NOVICE
  ADEPT
  MASTER
}

enum SymAbilityType {
  ACTIVE
  FREE
  PASSIVE
  REACTION
  SPECIAL
}

type User implements Node {
  id: ID!
  username: String!
  email: String!
  password: String!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  events(where: EventWhereInput, orderBy: EventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  creatures(where: CreatureWhereInput, orderBy: CreatureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Creature!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
  creatures: CreatureCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutCreaturesInput {
  create: UserCreateWithoutCreaturesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCreaturesInput {
  username: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutAuthorInput
  events: EventCreateManyWithoutAuthorInput
}

input UserCreateWithoutEventsInput {
  username: String!
  email: String!
  password: String!
  projects: ProjectCreateManyWithoutAuthorInput
  creatures: CreatureCreateManyWithoutAuthorInput
}

input UserCreateWithoutProjectsInput {
  username: String!
  email: String!
  password: String!
  events: EventCreateManyWithoutAuthorInput
  creatures: CreatureCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  username: String!
  email: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
  creatures: CreatureUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutCreaturesInput {
  create: UserCreateWithoutCreaturesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutCreaturesDataInput
  upsert: UserUpsertWithoutCreaturesInput
}

input UserUpdateOneWithoutEventsInput {
  create: UserCreateWithoutEventsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutEventsDataInput
  upsert: UserUpsertWithoutEventsInput
}

input UserUpdateOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutProjectsDataInput
  upsert: UserUpsertWithoutProjectsInput
}

input UserUpdateWithoutCreaturesDataInput {
  username: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutAuthorInput
  events: EventUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutEventsDataInput {
  username: String
  email: String
  password: String
  projects: ProjectUpdateManyWithoutAuthorInput
  creatures: CreatureUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutProjectsDataInput {
  username: String
  email: String
  password: String
  events: EventUpdateManyWithoutAuthorInput
  creatures: CreatureUpdateManyWithoutAuthorInput
}

input UserUpsertWithoutCreaturesInput {
  update: UserUpdateWithoutCreaturesDataInput!
  create: UserCreateWithoutCreaturesInput!
}

input UserUpsertWithoutEventsInput {
  update: UserUpdateWithoutEventsDataInput!
  create: UserCreateWithoutEventsInput!
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsDataInput!
  create: UserCreateWithoutProjectsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  projects_every: ProjectWhereInput
  projects_some: ProjectWhereInput
  projects_none: ProjectWhereInput
  events_every: EventWhereInput
  events_some: EventWhereInput
  events_none: EventWhereInput
  creatures_every: CreatureWhereInput
  creatures_some: CreatureWhereInput
  creatures_none: CreatureWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
