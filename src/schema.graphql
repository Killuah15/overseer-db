#import Event,Project,Creature,Attributes,Conditions,PhysicalConditions,SpiritualConditions,Fitness,Corruption,EventRole,Rulebook,PSymCreature,PSymLocalAbility,PSymPresetAbility,PSymAbilityDescription,PAttributes,PConditions,PPhysicalConditions,PSpiritualConditions,PFitness,PCorruption,SymAbilityType,SymAbilityRank from "./generated/prisma.graphql"
#----------TYPES----------
type User {
  id: ID!
  username: String!
  email: String!
  events: [Event!]!
  projects: [Project!]!
  updatedAt: String!
  createdAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}

#----------OPERATIONS----------
type Query {
  users: [User!]!
  projects: [Project!]!
  events(projectID: ID, projectTitle: String): [Event!]!
  creatures(projectID: ID, projectTitle: String, eventID: ID, eventTitle: String, fromRulebook: Rulebook): [Creature!]!
  pcreatures(rulebook: Rulebook!): [PSymCreature!]!
  currentUser: User!
  project(id: ID!): Project!
  event(id: ID!): Event!
  creature(id: ID!): Creature!
}

type Mutation {
  signup(data: SignupInput!): AuthPayload!
  login(data: LoginInput!): AuthPayload!
  logout: User!
  createProject(title: String!, description: String, rulebook: Rulebook!): Project!
  createEvent(data: EventInput!): Event!
  createCreature(data: CreatureInput!): Creature!
  deleteCurrentUser: User!
  deleteProject(id: ID!): Project!
  deleteEvent(id: ID!): Event!
  deleteCreature(id: ID!): Creature!
  updateProject(id: ID!, data: uProjectInput): Project!
  updateEvent(id: ID!, data: uEventInput): Event!
  updateCreature(id: ID!, data: uCreatureInput): Creature!
  updateCurrentUser(password: String!, data: uUserInput): User!
}

#----------INPUT----------

input SignupInput {
  email: String!
  username: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input EventInput {
  title: String!
  description: String
  eventRole: EventRole!
  index: Int!
  project: ID!
}

input CreatureInput {
  event: ID!
  name: String
  race: String!
  shadow: String
  rulebook: Rulebook!
  Conditions: ConditionsInput!
  attributes: AttributesInput!
  abilities: [AbilityInput!]!
}

input AbilityInput {
  currentRank: SymAbilityRank!
  title: String!
  descriptions: [AbilityDescriptionsInput!]!
}

input AbilityDescriptionsInput {
  type: SymAbilityType!
  rank: SymAbilityRank!
  description: String!
}

input AttributesInput {
  accurate: Int!
  cunning: Int!
  discreet: Int!
  persuasive: Int!
  quick: Int!
  resolute: Int!
  strong: Int!
  vigilant: Int!
  defense: Int!
}

input ConditionsInput {
  physical: PhysicalConditionsInput!
  spiritual: SpiritualConditionsInput!
}

input PhysicalConditionsInput {
  fitness: FitnessInput!
}

input SpiritualConditionsInput {
  corruption: CorruptionInput!
}

input CorruptionInput {
  current: Int!
  threshold: Int!
  permanent: Int!
}

input FitnessInput {
  toughness: Int!
  painThreshold: Int!
}

#----------UPDATE INPUTS----------

input uProjectInput {
  title: String
  description: String
}

input uEventInput {
  title: String
  description: String
  index: Int!
  eventRole: EventRole
}

input uCreatureInput {
  name: String
  race: String
  shadow: String
  Conditions: uConditionsInput
  attributes: uAttributesInput
}

input uAttributesInput {
  accurate: Int
  cunning: Int
  discreet: Int
  persuasive: Int
  quick: Int
  resolute: Int
  strong: Int
  vigilant: Int
  defense: Int
}

input uConditionsInput {
  physical: uPhysicalConditionsInput
  spiritual: uSpiritualConditionsInput
}

input uSpiritualConditionsInput {
  corruption: uCorruptionInput
}

input uPhysicalConditionsInput {
  fitness: uFitnessInput
}

input uCorruptionInput {
  current: Int
  threshold: Int
  permanent: Int
}

input uFitnessInput {
  toughness: Int
  painThreshold: Int
}

input uUserInput {
  username: String
  password: String
}

#----------ENUMS----------           -> EventRole wird importiert, siehe Zeile 1